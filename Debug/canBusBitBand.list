
canBusBitBand.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e44  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08001f04  08001f04  00002f04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001f48  08001f48  0000300c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08001f48  08001f48  0000300c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08001f48  08001f48  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001f48  08001f48  00002f48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001f4c  08001f4c  00002f4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08001f50  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f4  2000000c  08001f5c  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000200  08001f5c  00003200  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010931  00000000  00000000  00003034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fcc  00000000  00000000  00013965  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 000091bd  00000000  00000000  00015931  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000af0  00000000  00000000  0001eaf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009b4  00000000  00000000  0001f5e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019195  00000000  00000000  0001ff94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012546  00000000  00000000  00039129  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00094f75  00000000  00000000  0004b66f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000e05e4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001c98  00000000  00000000  000e0628  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  000e22c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001eec 	.word	0x08001eec

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08001eec 	.word	0x08001eec

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000220:	b500      	push	{lr}
 8000222:	b099      	sub	sp, #100	@ 0x64
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000224:	221c      	movs	r2, #28
 8000226:	2100      	movs	r1, #0
 8000228:	a80d      	add	r0, sp, #52	@ 0x34
 800022a:	f001 fe33 	bl	8001e94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800022e:	2210      	movs	r2, #16
 8000230:	2100      	movs	r1, #0
 8000232:	a807      	add	r0, sp, #28
 8000234:	f001 fe2e 	bl	8001e94 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000238:	221c      	movs	r2, #28
 800023a:	2100      	movs	r1, #0
 800023c:	4668      	mov	r0, sp
 800023e:	f001 fe29 	bl	8001e94 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000242:	2301      	movs	r3, #1
 8000244:	930b      	str	r3, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000246:	2205      	movs	r2, #5
 8000248:	920c      	str	r2, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800024a:	3a03      	subs	r2, #3
 800024c:	9214      	str	r2, [sp, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800024e:	2280      	movs	r2, #128	@ 0x80
 8000250:	0252      	lsls	r2, r2, #9
 8000252:	9215      	str	r2, [sp, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000254:	22a0      	movs	r2, #160	@ 0xa0
 8000256:	0392      	lsls	r2, r2, #14
 8000258:	9216      	str	r2, [sp, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 800025a:	9317      	str	r3, [sp, #92]	@ 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800025c:	a80b      	add	r0, sp, #44	@ 0x2c
 800025e:	f000 fc89 	bl	8000b74 <HAL_RCC_OscConfig>
 8000262:	2800      	cmp	r0, #0
 8000264:	d117      	bne.n	8000296 <SystemClock_Config+0x76>
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000266:	2307      	movs	r3, #7
 8000268:	9307      	str	r3, [sp, #28]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800026a:	3b05      	subs	r3, #5
 800026c:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800026e:	2300      	movs	r3, #0
 8000270:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000272:	930a      	str	r3, [sp, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000274:	2101      	movs	r1, #1
 8000276:	a807      	add	r0, sp, #28
 8000278:	f000 ff7e 	bl	8001178 <HAL_RCC_ClockConfig>
 800027c:	2800      	cmp	r0, #0
 800027e:	d10c      	bne.n	800029a <SystemClock_Config+0x7a>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000280:	2302      	movs	r3, #2
 8000282:	9300      	str	r3, [sp, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000284:	2300      	movs	r3, #0
 8000286:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000288:	4668      	mov	r0, sp
 800028a:	f001 f829 	bl	80012e0 <HAL_RCCEx_PeriphCLKConfig>
 800028e:	2800      	cmp	r0, #0
 8000290:	d105      	bne.n	800029e <SystemClock_Config+0x7e>
  {
    Error_Handler();
  }
}
 8000292:	b019      	add	sp, #100	@ 0x64
 8000294:	bd00      	pop	{pc}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000296:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000298:	e7fe      	b.n	8000298 <SystemClock_Config+0x78>
 800029a:	b672      	cpsid	i
 800029c:	e7fe      	b.n	800029c <SystemClock_Config+0x7c>
 800029e:	b672      	cpsid	i
 80002a0:	e7fe      	b.n	80002a0 <SystemClock_Config+0x80>
	...

080002a4 <main>:
{
 80002a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002a6:	46c6      	mov	lr, r8
 80002a8:	b500      	push	{lr}
 80002aa:	b08c      	sub	sp, #48	@ 0x30
  HAL_Init();
 80002ac:	f000 fad4 	bl	8000858 <HAL_Init>
  SystemClock_Config();
 80002b0:	f7ff ffb6 	bl	8000220 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002b4:	2214      	movs	r2, #20
 80002b6:	2100      	movs	r1, #0
 80002b8:	a805      	add	r0, sp, #20
 80002ba:	f001 fdeb 	bl	8001e94 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002be:	4b52      	ldr	r3, [pc, #328]	@ (8000408 <main+0x164>)
 80002c0:	695a      	ldr	r2, [r3, #20]
 80002c2:	2180      	movs	r1, #128	@ 0x80
 80002c4:	0309      	lsls	r1, r1, #12
 80002c6:	430a      	orrs	r2, r1
 80002c8:	615a      	str	r2, [r3, #20]
 80002ca:	695a      	ldr	r2, [r3, #20]
 80002cc:	400a      	ands	r2, r1
 80002ce:	9200      	str	r2, [sp, #0]
 80002d0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80002d2:	695a      	ldr	r2, [r3, #20]
 80002d4:	2180      	movs	r1, #128	@ 0x80
 80002d6:	03c9      	lsls	r1, r1, #15
 80002d8:	430a      	orrs	r2, r1
 80002da:	615a      	str	r2, [r3, #20]
 80002dc:	695a      	ldr	r2, [r3, #20]
 80002de:	400a      	ands	r2, r1
 80002e0:	9201      	str	r2, [sp, #4]
 80002e2:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002e4:	695a      	ldr	r2, [r3, #20]
 80002e6:	2180      	movs	r1, #128	@ 0x80
 80002e8:	0289      	lsls	r1, r1, #10
 80002ea:	430a      	orrs	r2, r1
 80002ec:	615a      	str	r2, [r3, #20]
 80002ee:	695b      	ldr	r3, [r3, #20]
 80002f0:	400b      	ands	r3, r1
 80002f2:	9302      	str	r3, [sp, #8]
 80002f4:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80002f6:	2390      	movs	r3, #144	@ 0x90
 80002f8:	05db      	lsls	r3, r3, #23
 80002fa:	4698      	mov	r8, r3
 80002fc:	2200      	movs	r2, #0
 80002fe:	2120      	movs	r1, #32
 8000300:	0018      	movs	r0, r3
 8000302:	f000 fc31 	bl	8000b68 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CAN_GPIO_Port, CAN_Pin, GPIO_PIN_RESET);
 8000306:	2780      	movs	r7, #128	@ 0x80
 8000308:	007f      	lsls	r7, r7, #1
 800030a:	4d40      	ldr	r5, [pc, #256]	@ (800040c <main+0x168>)
 800030c:	2200      	movs	r2, #0
 800030e:	0039      	movs	r1, r7
 8000310:	0028      	movs	r0, r5
 8000312:	f000 fc29 	bl	8000b68 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 8000316:	2380      	movs	r3, #128	@ 0x80
 8000318:	019b      	lsls	r3, r3, #6
 800031a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800031c:	2384      	movs	r3, #132	@ 0x84
 800031e:	039b      	lsls	r3, r3, #14
 8000320:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000322:	2400      	movs	r4, #0
 8000324:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000326:	a905      	add	r1, sp, #20
 8000328:	0028      	movs	r0, r5
 800032a:	f000 fb11 	bl	8000950 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD2_Pin;
 800032e:	2320      	movs	r3, #32
 8000330:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000332:	2601      	movs	r6, #1
 8000334:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000336:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000338:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800033a:	a905      	add	r1, sp, #20
 800033c:	4640      	mov	r0, r8
 800033e:	f000 fb07 	bl	8000950 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = CAN_Pin;
 8000342:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000344:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000346:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000348:	2303      	movs	r3, #3
 800034a:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(CAN_GPIO_Port, &GPIO_InitStruct);
 800034c:	a905      	add	r1, sp, #20
 800034e:	0028      	movs	r0, r5
 8000350:	f000 fafe 	bl	8000950 <HAL_GPIO_Init>
  huart2.Instance = USART2;
 8000354:	482e      	ldr	r0, [pc, #184]	@ (8000410 <main+0x16c>)
 8000356:	4b2f      	ldr	r3, [pc, #188]	@ (8000414 <main+0x170>)
 8000358:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 38400;
 800035a:	2396      	movs	r3, #150	@ 0x96
 800035c:	021b      	lsls	r3, r3, #8
 800035e:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000360:	6084      	str	r4, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000362:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000364:	6104      	str	r4, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000366:	230c      	movs	r3, #12
 8000368:	6143      	str	r3, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800036a:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800036c:	61c4      	str	r4, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800036e:	6204      	str	r4, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000370:	6244      	str	r4, [r0, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000372:	f001 fd59 	bl	8001e28 <HAL_UART_Init>
 8000376:	2800      	cmp	r0, #0
 8000378:	d13e      	bne.n	80003f8 <main+0x154>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800037a:	2210      	movs	r2, #16
 800037c:	2100      	movs	r1, #0
 800037e:	a805      	add	r0, sp, #20
 8000380:	f001 fd88 	bl	8001e94 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000384:	2208      	movs	r2, #8
 8000386:	2100      	movs	r1, #0
 8000388:	a803      	add	r0, sp, #12
 800038a:	f001 fd83 	bl	8001e94 <memset>
  htim2.Instance = TIM2;
 800038e:	4822      	ldr	r0, [pc, #136]	@ (8000418 <main+0x174>)
 8000390:	2380      	movs	r3, #128	@ 0x80
 8000392:	05db      	lsls	r3, r3, #23
 8000394:	6003      	str	r3, [r0, #0]
  htim2.Init.Prescaler = 48-1;
 8000396:	232f      	movs	r3, #47	@ 0x2f
 8000398:	6043      	str	r3, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800039a:	2300      	movs	r3, #0
 800039c:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 0xFFFF;
 800039e:	4a1f      	ldr	r2, [pc, #124]	@ (800041c <main+0x178>)
 80003a0:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003a2:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80003a4:	3380      	adds	r3, #128	@ 0x80
 80003a6:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80003a8:	f001 f9da 	bl	8001760 <HAL_TIM_Base_Init>
 80003ac:	2800      	cmp	r0, #0
 80003ae:	d125      	bne.n	80003fc <main+0x158>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003b0:	2380      	movs	r3, #128	@ 0x80
 80003b2:	015b      	lsls	r3, r3, #5
 80003b4:	9305      	str	r3, [sp, #20]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80003b6:	4818      	ldr	r0, [pc, #96]	@ (8000418 <main+0x174>)
 80003b8:	a905      	add	r1, sp, #20
 80003ba:	f001 fa09 	bl	80017d0 <HAL_TIM_ConfigClockSource>
 80003be:	2800      	cmp	r0, #0
 80003c0:	d11e      	bne.n	8000400 <main+0x15c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003c2:	2300      	movs	r3, #0
 80003c4:	9303      	str	r3, [sp, #12]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003c6:	9304      	str	r3, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80003c8:	4813      	ldr	r0, [pc, #76]	@ (8000418 <main+0x174>)
 80003ca:	a903      	add	r1, sp, #12
 80003cc:	f001 fabc 	bl	8001948 <HAL_TIMEx_MasterConfigSynchronization>
 80003d0:	2800      	cmp	r0, #0
 80003d2:	d117      	bne.n	8000404 <main+0x160>
  HAL_TIM_Base_Start(&htim2);
 80003d4:	4810      	ldr	r0, [pc, #64]	@ (8000418 <main+0x174>)
 80003d6:	f001 f83f 	bl	8001458 <HAL_TIM_Base_Start>
  uint8_t payload[] = {'H', 'e', 'l', 'l', 'o', 'C', 'A', 'N'};
 80003da:	aa0a      	add	r2, sp, #40	@ 0x28
 80003dc:	4b10      	ldr	r3, [pc, #64]	@ (8000420 <main+0x17c>)
 80003de:	cb11      	ldmia	r3!, {r0, r4}
 80003e0:	c211      	stmia	r2!, {r0, r4}
	  send_can_frame(0x123, len, payload);
 80003e2:	2424      	movs	r4, #36	@ 0x24
 80003e4:	34ff      	adds	r4, #255	@ 0xff
 80003e6:	aa0a      	add	r2, sp, #40	@ 0x28
 80003e8:	2108      	movs	r1, #8
 80003ea:	0020      	movs	r0, r4
 80003ec:	f000 f842 	bl	8000474 <send_can_frame>
	  delay_us(100);
 80003f0:	2064      	movs	r0, #100	@ 0x64
 80003f2:	f000 f833 	bl	800045c <delay_us>
  while (1)
 80003f6:	e7f6      	b.n	80003e6 <main+0x142>
 80003f8:	b672      	cpsid	i
  while (1)
 80003fa:	e7fe      	b.n	80003fa <main+0x156>
 80003fc:	b672      	cpsid	i
 80003fe:	e7fe      	b.n	80003fe <main+0x15a>
 8000400:	b672      	cpsid	i
 8000402:	e7fe      	b.n	8000402 <main+0x15e>
 8000404:	b672      	cpsid	i
 8000406:	e7fe      	b.n	8000406 <main+0x162>
 8000408:	40021000 	.word	0x40021000
 800040c:	48000800 	.word	0x48000800
 8000410:	20000028 	.word	0x20000028
 8000414:	40004400 	.word	0x40004400
 8000418:	200000b0 	.word	0x200000b0
 800041c:	0000ffff 	.word	0x0000ffff
 8000420:	08001f04 	.word	0x08001f04

08000424 <append_bit>:
    delay_us(CAN_BIT_US);
}

// === DODAJ BIT Z OBSŁUGĄ STUFFINGU ===
static void append_bit(uint8_t *buf, int *len, uint8_t bit, uint8_t *last, int *count)
{
 8000424:	b570      	push	{r4, r5, r6, lr}
 8000426:	9e04      	ldr	r6, [sp, #16]
    buf[(*len)++] = bit;
 8000428:	680c      	ldr	r4, [r1, #0]
 800042a:	1c65      	adds	r5, r4, #1
 800042c:	600d      	str	r5, [r1, #0]
 800042e:	5502      	strb	r2, [r0, r4]

    if (bit == *last)
 8000430:	781c      	ldrb	r4, [r3, #0]
 8000432:	4294      	cmp	r4, r2
 8000434:	d003      	beq.n	800043e <append_bit+0x1a>
            *last = !bit;
        }
    }
    else
    {
        *count = 1;
 8000436:	2101      	movs	r1, #1
 8000438:	6031      	str	r1, [r6, #0]
    }

    *last = bit;
 800043a:	701a      	strb	r2, [r3, #0]
}
 800043c:	bd70      	pop	{r4, r5, r6, pc}
        (*count)++;
 800043e:	6834      	ldr	r4, [r6, #0]
 8000440:	3401      	adds	r4, #1
 8000442:	6034      	str	r4, [r6, #0]
        if (*count == 5)
 8000444:	2c05      	cmp	r4, #5
 8000446:	d1f8      	bne.n	800043a <append_bit+0x16>
            buf[(*len)++] = !bit; // Stuff bit
 8000448:	680c      	ldr	r4, [r1, #0]
 800044a:	1c65      	adds	r5, r4, #1
 800044c:	600d      	str	r5, [r1, #0]
 800044e:	4251      	negs	r1, r2
 8000450:	4151      	adcs	r1, r2
 8000452:	5501      	strb	r1, [r0, r4]
            *count = 1;
 8000454:	2101      	movs	r1, #1
 8000456:	6031      	str	r1, [r6, #0]
            *last = !bit;
 8000458:	e7ef      	b.n	800043a <append_bit+0x16>
	...

0800045c <delay_us>:
	uint16_t start = __HAL_TIM_GET_COUNTER(&htim2);
 800045c:	4b04      	ldr	r3, [pc, #16]	@ (8000470 <delay_us+0x14>)
 800045e:	6819      	ldr	r1, [r3, #0]
 8000460:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim2) - start) < us);
 8000462:	0412      	lsls	r2, r2, #16
 8000464:	0c12      	lsrs	r2, r2, #16
 8000466:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 8000468:	1a9b      	subs	r3, r3, r2
 800046a:	4283      	cmp	r3, r0
 800046c:	d3fb      	bcc.n	8000466 <delay_us+0xa>
}
 800046e:	4770      	bx	lr
 8000470:	200000b0 	.word	0x200000b0

08000474 <send_can_frame>:
{
 8000474:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000476:	46de      	mov	lr, fp
 8000478:	4657      	mov	r7, sl
 800047a:	464e      	mov	r6, r9
 800047c:	4645      	mov	r5, r8
 800047e:	b5e0      	push	{r5, r6, r7, lr}
 8000480:	b0a7      	sub	sp, #156	@ 0x9c
 8000482:	0007      	movs	r7, r0
 8000484:	4688      	mov	r8, r1
 8000486:	9203      	str	r2, [sp, #12]
    return crc & 0x7FFF;
}

static void prepare_can_frame(uint16_t id, uint8_t dlc, uint8_t *data)
{
    bitstream_len = 0;
 8000488:	498b      	ldr	r1, [pc, #556]	@ (80006b8 <send_can_frame+0x244>)
 800048a:	2200      	movs	r2, #0
 800048c:	600a      	str	r2, [r1, #0]
    int count = 1;
 800048e:	2301      	movs	r3, #1
 8000490:	9305      	str	r3, [sp, #20]
    uint8_t last = 0;
 8000492:	330a      	adds	r3, #10
 8000494:	a802      	add	r0, sp, #8
 8000496:	4684      	mov	ip, r0
 8000498:	4463      	add	r3, ip
 800049a:	701a      	strb	r2, [r3, #0]

    uint8_t crc_input[128];
    int crc_bit_len = 0;

    // SOF
    append_bit(bitstream, &bitstream_len, 0, &last, &count);
 800049c:	4887      	ldr	r0, [pc, #540]	@ (80006bc <send_can_frame+0x248>)
 800049e:	aa05      	add	r2, sp, #20
 80004a0:	9200      	str	r2, [sp, #0]
 80004a2:	2200      	movs	r2, #0
 80004a4:	f7ff ffbe 	bl	8000424 <append_bit>

    // 11-bit ID
    for (int i = 10; i >= 0; i--) {
 80004a8:	ad06      	add	r5, sp, #24
    append_bit(bitstream, &bitstream_len, 0, &last, &count);
 80004aa:	002e      	movs	r6, r5
    for (int i = 10; i >= 0; i--) {
 80004ac:	240a      	movs	r4, #10
        uint8_t b = (id >> i) & 1;
 80004ae:	2301      	movs	r3, #1
 80004b0:	469b      	mov	fp, r3
        crc_input[crc_bit_len++] = b;
        append_bit(bitstream, &bitstream_len, b, &last, &count);
 80004b2:	4b81      	ldr	r3, [pc, #516]	@ (80006b8 <send_can_frame+0x244>)
 80004b4:	469a      	mov	sl, r3
 80004b6:	4b81      	ldr	r3, [pc, #516]	@ (80006bc <send_can_frame+0x248>)
 80004b8:	4699      	mov	r9, r3
 80004ba:	4653      	mov	r3, sl
 80004bc:	46aa      	mov	sl, r5
 80004be:	001d      	movs	r5, r3
        uint8_t b = (id >> i) & 1;
 80004c0:	003a      	movs	r2, r7
 80004c2:	4122      	asrs	r2, r4
 80004c4:	465b      	mov	r3, fp
 80004c6:	401a      	ands	r2, r3
        crc_input[crc_bit_len++] = b;
 80004c8:	7032      	strb	r2, [r6, #0]
        append_bit(bitstream, &bitstream_len, b, &last, &count);
 80004ca:	ab05      	add	r3, sp, #20
 80004cc:	9300      	str	r3, [sp, #0]
 80004ce:	230b      	movs	r3, #11
 80004d0:	a902      	add	r1, sp, #8
 80004d2:	468c      	mov	ip, r1
 80004d4:	4463      	add	r3, ip
 80004d6:	0029      	movs	r1, r5
 80004d8:	4648      	mov	r0, r9
 80004da:	f7ff ffa3 	bl	8000424 <append_bit>
    for (int i = 10; i >= 0; i--) {
 80004de:	3601      	adds	r6, #1
 80004e0:	3c01      	subs	r4, #1
 80004e2:	d2ed      	bcs.n	80004c0 <send_can_frame+0x4c>
    }

    // RTR = 0
    crc_input[crc_bit_len++] = 0;
 80004e4:	4655      	mov	r5, sl
 80004e6:	ae06      	add	r6, sp, #24
 80004e8:	2300      	movs	r3, #0
 80004ea:	469a      	mov	sl, r3
 80004ec:	72f3      	strb	r3, [r6, #11]
    append_bit(bitstream, &bitstream_len, 0, &last, &count);
 80004ee:	4972      	ldr	r1, [pc, #456]	@ (80006b8 <send_can_frame+0x244>)
 80004f0:	4f72      	ldr	r7, [pc, #456]	@ (80006bc <send_can_frame+0x248>)
 80004f2:	ac05      	add	r4, sp, #20
 80004f4:	9400      	str	r4, [sp, #0]
 80004f6:	330b      	adds	r3, #11
 80004f8:	aa02      	add	r2, sp, #8
 80004fa:	4694      	mov	ip, r2
 80004fc:	4463      	add	r3, ip
 80004fe:	2200      	movs	r2, #0
 8000500:	4689      	mov	r9, r1
 8000502:	0038      	movs	r0, r7
 8000504:	f7ff ff8e 	bl	8000424 <append_bit>
    // IDE = 0
    crc_input[crc_bit_len++] = 0;
 8000508:	4653      	mov	r3, sl
 800050a:	7333      	strb	r3, [r6, #12]
    append_bit(bitstream, &bitstream_len, 0, &last, &count);
 800050c:	9400      	str	r4, [sp, #0]
 800050e:	330b      	adds	r3, #11
 8000510:	aa02      	add	r2, sp, #8
 8000512:	4694      	mov	ip, r2
 8000514:	4463      	add	r3, ip
 8000516:	2200      	movs	r2, #0
 8000518:	4649      	mov	r1, r9
 800051a:	0038      	movs	r0, r7
 800051c:	f7ff ff82 	bl	8000424 <append_bit>
    // r0 = 0
    crc_input[crc_bit_len++] = 0;
 8000520:	4653      	mov	r3, sl
 8000522:	7373      	strb	r3, [r6, #13]
    append_bit(bitstream, &bitstream_len, 0, &last, &count);
 8000524:	9400      	str	r4, [sp, #0]
 8000526:	330b      	adds	r3, #11
 8000528:	aa02      	add	r2, sp, #8
 800052a:	4694      	mov	ip, r2
 800052c:	4463      	add	r3, ip
 800052e:	2200      	movs	r2, #0
 8000530:	4649      	mov	r1, r9
 8000532:	0038      	movs	r0, r7
 8000534:	f7ff ff76 	bl	8000424 <append_bit>
 8000538:	002e      	movs	r6, r5

    // DLC (4 bity)
    for (int i = 3; i >= 0; i--)
 800053a:	2403      	movs	r4, #3
    {
        uint8_t b = (dlc >> i) & 1;
 800053c:	2301      	movs	r3, #1
 800053e:	469a      	mov	sl, r3

        crc_input[crc_bit_len++] = b;
        append_bit(bitstream, &bitstream_len, b, &last, &count);
 8000540:	4b5d      	ldr	r3, [pc, #372]	@ (80006b8 <send_can_frame+0x244>)
 8000542:	4699      	mov	r9, r3
 8000544:	4f5d      	ldr	r7, [pc, #372]	@ (80006bc <send_can_frame+0x248>)
 8000546:	46ab      	mov	fp, r5
 8000548:	4645      	mov	r5, r8
 800054a:	46b8      	mov	r8, r7
        uint8_t b = (dlc >> i) & 1;
 800054c:	002f      	movs	r7, r5
 800054e:	4127      	asrs	r7, r4
 8000550:	4652      	mov	r2, sl
 8000552:	403a      	ands	r2, r7
        crc_input[crc_bit_len++] = b;
 8000554:	73b2      	strb	r2, [r6, #14]
        append_bit(bitstream, &bitstream_len, b, &last, &count);
 8000556:	ab05      	add	r3, sp, #20
 8000558:	9300      	str	r3, [sp, #0]
 800055a:	230b      	movs	r3, #11
 800055c:	a902      	add	r1, sp, #8
 800055e:	468c      	mov	ip, r1
 8000560:	4463      	add	r3, ip
 8000562:	4649      	mov	r1, r9
 8000564:	4640      	mov	r0, r8
 8000566:	f7ff ff5d 	bl	8000424 <append_bit>
    for (int i = 3; i >= 0; i--)
 800056a:	3601      	adds	r6, #1
 800056c:	3c01      	subs	r4, #1
 800056e:	d2ed      	bcs.n	800054c <send_can_frame+0xd8>
    }

    // DATA
    for (int i = 0; i < dlc; i++)
 8000570:	46a8      	mov	r8, r5
 8000572:	465d      	mov	r5, fp
 8000574:	46bb      	mov	fp, r7
 8000576:	4643      	mov	r3, r8
 8000578:	2012      	movs	r0, #18
 800057a:	2b00      	cmp	r3, #0
 800057c:	d038      	beq.n	80005f0 <send_can_frame+0x17c>
 800057e:	2322      	movs	r3, #34	@ 0x22
 8000580:	aa02      	add	r2, sp, #8
 8000582:	4694      	mov	ip, r2
 8000584:	4463      	add	r3, ip
 8000586:	9302      	str	r3, [sp, #8]
 8000588:	9e03      	ldr	r6, [sp, #12]
 800058a:	2300      	movs	r3, #0
 800058c:	469a      	mov	sl, r3
    {
        for (int b = 7; b >= 0; b--)
        {
            uint8_t bit = (data[i] >> b) & 1;
 800058e:	3301      	adds	r3, #1
 8000590:	4699      	mov	r9, r3
            crc_input[crc_bit_len++] = bit;
            append_bit(bitstream, &bitstream_len, bit, &last, &count);
 8000592:	4b49      	ldr	r3, [pc, #292]	@ (80006b8 <send_can_frame+0x244>)
 8000594:	4698      	mov	r8, r3
 8000596:	4f49      	ldr	r7, [pc, #292]	@ (80006bc <send_can_frame+0x248>)
 8000598:	9503      	str	r5, [sp, #12]
 800059a:	003b      	movs	r3, r7
 800059c:	4647      	mov	r7, r8
 800059e:	4698      	mov	r8, r3
 80005a0:	e008      	b.n	80005b4 <send_can_frame+0x140>
    for (int i = 0; i < dlc; i++)
 80005a2:	2301      	movs	r3, #1
 80005a4:	469c      	mov	ip, r3
 80005a6:	44e2      	add	sl, ip
 80005a8:	9b02      	ldr	r3, [sp, #8]
 80005aa:	3308      	adds	r3, #8
 80005ac:	9302      	str	r3, [sp, #8]
 80005ae:	3601      	adds	r6, #1
 80005b0:	45d3      	cmp	fp, sl
 80005b2:	dd14      	ble.n	80005de <send_can_frame+0x16a>
    for (int i = 3; i >= 0; i--)
 80005b4:	9d02      	ldr	r5, [sp, #8]
        for (int b = 7; b >= 0; b--)
 80005b6:	2407      	movs	r4, #7
            uint8_t bit = (data[i] >> b) & 1;
 80005b8:	7832      	ldrb	r2, [r6, #0]
 80005ba:	4122      	asrs	r2, r4
 80005bc:	464b      	mov	r3, r9
 80005be:	401a      	ands	r2, r3
            crc_input[crc_bit_len++] = bit;
 80005c0:	702a      	strb	r2, [r5, #0]
            append_bit(bitstream, &bitstream_len, bit, &last, &count);
 80005c2:	ab05      	add	r3, sp, #20
 80005c4:	9300      	str	r3, [sp, #0]
 80005c6:	230b      	movs	r3, #11
 80005c8:	a902      	add	r1, sp, #8
 80005ca:	468c      	mov	ip, r1
 80005cc:	4463      	add	r3, ip
 80005ce:	0039      	movs	r1, r7
 80005d0:	4640      	mov	r0, r8
 80005d2:	f7ff ff27 	bl	8000424 <append_bit>
        for (int b = 7; b >= 0; b--)
 80005d6:	3501      	adds	r5, #1
 80005d8:	3c01      	subs	r4, #1
 80005da:	d2ed      	bcs.n	80005b8 <send_can_frame+0x144>
 80005dc:	e7e1      	b.n	80005a2 <send_can_frame+0x12e>
 80005de:	9d03      	ldr	r5, [sp, #12]
 80005e0:	2000      	movs	r0, #0
 80005e2:	465b      	mov	r3, fp
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	dd02      	ble.n	80005ee <send_can_frame+0x17a>
 80005e8:	4658      	mov	r0, fp
 80005ea:	3801      	subs	r0, #1
 80005ec:	00c0      	lsls	r0, r0, #3
 80005ee:	301a      	adds	r0, #26
    for (int i = 0; i < bit_len; ++i)
 80005f0:	1940      	adds	r0, r0, r5
    uint16_t crc = 0;
 80005f2:	2300      	movs	r3, #0
        uint8_t crc_msb = (crc >> 14) & 1;
 80005f4:	2401      	movs	r4, #1
            crc ^= poly;
 80005f6:	4e32      	ldr	r6, [pc, #200]	@ (80006c0 <send_can_frame+0x24c>)
 80005f8:	e003      	b.n	8000602 <send_can_frame+0x18e>
 80005fa:	4073      	eors	r3, r6
    for (int i = 0; i < bit_len; ++i)
 80005fc:	3501      	adds	r5, #1
 80005fe:	42a8      	cmp	r0, r5
 8000600:	d007      	beq.n	8000612 <send_can_frame+0x19e>
        uint8_t crc_msb = (crc >> 14) & 1;
 8000602:	0b9a      	lsrs	r2, r3, #14
 8000604:	4022      	ands	r2, r4
        crc <<= 1;
 8000606:	005b      	lsls	r3, r3, #1
 8000608:	b29b      	uxth	r3, r3
        if (bit ^ crc_msb)
 800060a:	7829      	ldrb	r1, [r5, #0]
 800060c:	4291      	cmp	r1, r2
 800060e:	d1f4      	bne.n	80005fa <send_can_frame+0x186>
 8000610:	e7f4      	b.n	80005fc <send_can_frame+0x188>
    return crc & 0x7FFF;
 8000612:	045b      	lsls	r3, r3, #17
 8000614:	0c5c      	lsrs	r4, r3, #17
        }
    }

    // CRC-15
    uint16_t crc = compute_can_crc(crc_input, crc_bit_len);
    for (int i = 14; i >= 0; i--)
 8000616:	250e      	movs	r5, #14
    {
        uint8_t b = (crc >> i) & 1;
        append_bit(bitstream, &bitstream_len, b, &last, &count);
 8000618:	4f27      	ldr	r7, [pc, #156]	@ (80006b8 <send_can_frame+0x244>)
 800061a:	4e28      	ldr	r6, [pc, #160]	@ (80006bc <send_can_frame+0x248>)
        uint8_t b = (crc >> i) & 1;
 800061c:	0023      	movs	r3, r4
 800061e:	412b      	asrs	r3, r5
        append_bit(bitstream, &bitstream_len, b, &last, &count);
 8000620:	2201      	movs	r2, #1
 8000622:	401a      	ands	r2, r3
 8000624:	ab05      	add	r3, sp, #20
 8000626:	9300      	str	r3, [sp, #0]
 8000628:	230b      	movs	r3, #11
 800062a:	a902      	add	r1, sp, #8
 800062c:	468c      	mov	ip, r1
 800062e:	4463      	add	r3, ip
 8000630:	0039      	movs	r1, r7
 8000632:	0030      	movs	r0, r6
 8000634:	f7ff fef6 	bl	8000424 <append_bit>
    for (int i = 14; i >= 0; i--)
 8000638:	3d01      	subs	r5, #1
 800063a:	d2ef      	bcs.n	800061c <send_can_frame+0x1a8>
    }

    // CRC delimiter
    append_bit(bitstream, &bitstream_len, 1, &last, &count);
 800063c:	4c1e      	ldr	r4, [pc, #120]	@ (80006b8 <send_can_frame+0x244>)
 800063e:	4d1f      	ldr	r5, [pc, #124]	@ (80006bc <send_can_frame+0x248>)
 8000640:	ae05      	add	r6, sp, #20
 8000642:	9600      	str	r6, [sp, #0]
 8000644:	230b      	movs	r3, #11
 8000646:	aa02      	add	r2, sp, #8
 8000648:	4694      	mov	ip, r2
 800064a:	4463      	add	r3, ip
 800064c:	2201      	movs	r2, #1
 800064e:	0021      	movs	r1, r4
 8000650:	0028      	movs	r0, r5
 8000652:	f7ff fee7 	bl	8000424 <append_bit>

    // ACK slot + delimiter
    append_bit(bitstream, &bitstream_len, 0, &last, &count);
 8000656:	9600      	str	r6, [sp, #0]
 8000658:	230b      	movs	r3, #11
 800065a:	aa02      	add	r2, sp, #8
 800065c:	4694      	mov	ip, r2
 800065e:	4463      	add	r3, ip
 8000660:	2200      	movs	r2, #0
 8000662:	0021      	movs	r1, r4
 8000664:	0028      	movs	r0, r5
 8000666:	f7ff fedd 	bl	8000424 <append_bit>
    append_bit(bitstream, &bitstream_len, 1, &last, &count);
 800066a:	9600      	str	r6, [sp, #0]
 800066c:	230b      	movs	r3, #11
 800066e:	aa02      	add	r2, sp, #8
 8000670:	4694      	mov	ip, r2
 8000672:	4463      	add	r3, ip
 8000674:	2201      	movs	r2, #1
 8000676:	0021      	movs	r1, r4
 8000678:	0028      	movs	r0, r5
 800067a:	f7ff fed3 	bl	8000424 <append_bit>
    for (int i = 0; i < bitstream_len; i++)
 800067e:	6825      	ldr	r5, [r4, #0]
 8000680:	2d00      	cmp	r5, #0
 8000682:	dd11      	ble.n	80006a8 <send_can_frame+0x234>
 8000684:	4c0d      	ldr	r4, [pc, #52]	@ (80006bc <send_can_frame+0x248>)
 8000686:	192d      	adds	r5, r5, r4
    	CAN_GPIO_Port->BRR = CAN_Pin;
 8000688:	4f0e      	ldr	r7, [pc, #56]	@ (80006c4 <send_can_frame+0x250>)
 800068a:	2680      	movs	r6, #128	@ 0x80
 800068c:	0076      	lsls	r6, r6, #1
 800068e:	e006      	b.n	800069e <send_can_frame+0x22a>
 8000690:	62be      	str	r6, [r7, #40]	@ 0x28
    delay_us(CAN_BIT_US);
 8000692:	2008      	movs	r0, #8
 8000694:	f7ff fee2 	bl	800045c <delay_us>
    for (int i = 0; i < bitstream_len; i++)
 8000698:	3401      	adds	r4, #1
 800069a:	42a5      	cmp	r5, r4
 800069c:	d004      	beq.n	80006a8 <send_can_frame+0x234>
    if (bit)
 800069e:	7823      	ldrb	r3, [r4, #0]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d0f5      	beq.n	8000690 <send_can_frame+0x21c>
    	CAN_GPIO_Port->BSRR = CAN_Pin;
 80006a4:	61be      	str	r6, [r7, #24]
 80006a6:	e7f4      	b.n	8000692 <send_can_frame+0x21e>
}
 80006a8:	b027      	add	sp, #156	@ 0x9c
 80006aa:	bcf0      	pop	{r4, r5, r6, r7}
 80006ac:	46bb      	mov	fp, r7
 80006ae:	46b2      	mov	sl, r6
 80006b0:	46a9      	mov	r9, r5
 80006b2:	46a0      	mov	r8, r4
 80006b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006b6:	46c0      	nop			@ (mov r8, r8)
 80006b8:	200000f8 	.word	0x200000f8
 80006bc:	200000fc 	.word	0x200000fc
 80006c0:	00004599 	.word	0x00004599
 80006c4:	48000800 	.word	0x48000800

080006c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006c8:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ca:	4b0a      	ldr	r3, [pc, #40]	@ (80006f4 <HAL_MspInit+0x2c>)
 80006cc:	6999      	ldr	r1, [r3, #24]
 80006ce:	2201      	movs	r2, #1
 80006d0:	4311      	orrs	r1, r2
 80006d2:	6199      	str	r1, [r3, #24]
 80006d4:	6999      	ldr	r1, [r3, #24]
 80006d6:	400a      	ands	r2, r1
 80006d8:	9200      	str	r2, [sp, #0]
 80006da:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006dc:	69da      	ldr	r2, [r3, #28]
 80006de:	2180      	movs	r1, #128	@ 0x80
 80006e0:	0549      	lsls	r1, r1, #21
 80006e2:	430a      	orrs	r2, r1
 80006e4:	61da      	str	r2, [r3, #28]
 80006e6:	69db      	ldr	r3, [r3, #28]
 80006e8:	400b      	ands	r3, r1
 80006ea:	9301      	str	r3, [sp, #4]
 80006ec:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ee:	b002      	add	sp, #8
 80006f0:	4770      	bx	lr
 80006f2:	46c0      	nop			@ (mov r8, r8)
 80006f4:	40021000 	.word	0x40021000

080006f8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80006f8:	b500      	push	{lr}
 80006fa:	b083      	sub	sp, #12
  if(htim_base->Instance==TIM2)
 80006fc:	2380      	movs	r3, #128	@ 0x80
 80006fe:	05db      	lsls	r3, r3, #23
 8000700:	6802      	ldr	r2, [r0, #0]
 8000702:	429a      	cmp	r2, r3
 8000704:	d001      	beq.n	800070a <HAL_TIM_Base_MspInit+0x12>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000706:	b003      	add	sp, #12
 8000708:	bd00      	pop	{pc}
    __HAL_RCC_TIM2_CLK_ENABLE();
 800070a:	4a09      	ldr	r2, [pc, #36]	@ (8000730 <HAL_TIM_Base_MspInit+0x38>)
 800070c:	69d1      	ldr	r1, [r2, #28]
 800070e:	2301      	movs	r3, #1
 8000710:	4319      	orrs	r1, r3
 8000712:	61d1      	str	r1, [r2, #28]
 8000714:	69d2      	ldr	r2, [r2, #28]
 8000716:	4013      	ands	r3, r2
 8000718:	9301      	str	r3, [sp, #4]
 800071a:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800071c:	2200      	movs	r2, #0
 800071e:	2100      	movs	r1, #0
 8000720:	200f      	movs	r0, #15
 8000722:	f000 f8bb 	bl	800089c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000726:	200f      	movs	r0, #15
 8000728:	f000 f8ea 	bl	8000900 <HAL_NVIC_EnableIRQ>
}
 800072c:	e7eb      	b.n	8000706 <HAL_TIM_Base_MspInit+0xe>
 800072e:	46c0      	nop			@ (mov r8, r8)
 8000730:	40021000 	.word	0x40021000

08000734 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000734:	b510      	push	{r4, lr}
 8000736:	b088      	sub	sp, #32
 8000738:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073a:	2214      	movs	r2, #20
 800073c:	2100      	movs	r1, #0
 800073e:	a803      	add	r0, sp, #12
 8000740:	f001 fba8 	bl	8001e94 <memset>
  if(huart->Instance==USART2)
 8000744:	4b11      	ldr	r3, [pc, #68]	@ (800078c <HAL_UART_MspInit+0x58>)
 8000746:	6822      	ldr	r2, [r4, #0]
 8000748:	429a      	cmp	r2, r3
 800074a:	d001      	beq.n	8000750 <HAL_UART_MspInit+0x1c>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800074c:	b008      	add	sp, #32
 800074e:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 8000750:	4b0f      	ldr	r3, [pc, #60]	@ (8000790 <HAL_UART_MspInit+0x5c>)
 8000752:	69d9      	ldr	r1, [r3, #28]
 8000754:	2280      	movs	r2, #128	@ 0x80
 8000756:	0292      	lsls	r2, r2, #10
 8000758:	4311      	orrs	r1, r2
 800075a:	61d9      	str	r1, [r3, #28]
 800075c:	69d9      	ldr	r1, [r3, #28]
 800075e:	4011      	ands	r1, r2
 8000760:	9101      	str	r1, [sp, #4]
 8000762:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000764:	6959      	ldr	r1, [r3, #20]
 8000766:	4311      	orrs	r1, r2
 8000768:	6159      	str	r1, [r3, #20]
 800076a:	695b      	ldr	r3, [r3, #20]
 800076c:	4013      	ands	r3, r2
 800076e:	9302      	str	r3, [sp, #8]
 8000770:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000772:	230c      	movs	r3, #12
 8000774:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000776:	3b0a      	subs	r3, #10
 8000778:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800077a:	3b01      	subs	r3, #1
 800077c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800077e:	2090      	movs	r0, #144	@ 0x90
 8000780:	a903      	add	r1, sp, #12
 8000782:	05c0      	lsls	r0, r0, #23
 8000784:	f000 f8e4 	bl	8000950 <HAL_GPIO_Init>
}
 8000788:	e7e0      	b.n	800074c <HAL_UART_MspInit+0x18>
 800078a:	46c0      	nop			@ (mov r8, r8)
 800078c:	40004400 	.word	0x40004400
 8000790:	40021000 	.word	0x40021000

08000794 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000794:	e7fe      	b.n	8000794 <NMI_Handler>

08000796 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000796:	e7fe      	b.n	8000796 <HardFault_Handler>

08000798 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000798:	4770      	bx	lr

0800079a <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800079a:	4770      	bx	lr

0800079c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800079c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800079e:	f000 f86b 	bl	8000878 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007a2:	bd10      	pop	{r4, pc}

080007a4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80007a4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80007a6:	4802      	ldr	r0, [pc, #8]	@ (80007b0 <TIM2_IRQHandler+0xc>)
 80007a8:	f000 fe8b 	bl	80014c2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80007ac:	bd10      	pop	{r4, pc}
 80007ae:	46c0      	nop			@ (mov r8, r8)
 80007b0:	200000b0 	.word	0x200000b0

080007b4 <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80007b4:	4770      	bx	lr
	...

080007b8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007b8:	480d      	ldr	r0, [pc, #52]	@ (80007f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007ba:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80007bc:	f7ff fffa 	bl	80007b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007c0:	480c      	ldr	r0, [pc, #48]	@ (80007f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80007c2:	490d      	ldr	r1, [pc, #52]	@ (80007f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007c4:	4a0d      	ldr	r2, [pc, #52]	@ (80007fc <LoopForever+0xe>)
  movs r3, #0
 80007c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007c8:	e002      	b.n	80007d0 <LoopCopyDataInit>

080007ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007ce:	3304      	adds	r3, #4

080007d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007d4:	d3f9      	bcc.n	80007ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007d6:	4a0a      	ldr	r2, [pc, #40]	@ (8000800 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007d8:	4c0a      	ldr	r4, [pc, #40]	@ (8000804 <LoopForever+0x16>)
  movs r3, #0
 80007da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007dc:	e001      	b.n	80007e2 <LoopFillZerobss>

080007de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007e0:	3204      	adds	r2, #4

080007e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007e4:	d3fb      	bcc.n	80007de <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80007e6:	f001 fb5d 	bl	8001ea4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007ea:	f7ff fd5b 	bl	80002a4 <main>

080007ee <LoopForever>:

LoopForever:
    b LoopForever
 80007ee:	e7fe      	b.n	80007ee <LoopForever>
  ldr   r0, =_estack
 80007f0:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80007f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007f8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80007fc:	08001f50 	.word	0x08001f50
  ldr r2, =_sbss
 8000800:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000804:	20000200 	.word	0x20000200

08000808 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000808:	e7fe      	b.n	8000808 <ADC1_COMP_IRQHandler>
	...

0800080c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800080c:	b570      	push	{r4, r5, r6, lr}
 800080e:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000810:	4d0e      	ldr	r5, [pc, #56]	@ (800084c <HAL_InitTick+0x40>)
 8000812:	4b0f      	ldr	r3, [pc, #60]	@ (8000850 <HAL_InitTick+0x44>)
 8000814:	7819      	ldrb	r1, [r3, #0]
 8000816:	20fa      	movs	r0, #250	@ 0xfa
 8000818:	0080      	lsls	r0, r0, #2
 800081a:	f7ff fc75 	bl	8000108 <__udivsi3>
 800081e:	0001      	movs	r1, r0
 8000820:	6828      	ldr	r0, [r5, #0]
 8000822:	f7ff fc71 	bl	8000108 <__udivsi3>
 8000826:	f000 f877 	bl	8000918 <HAL_SYSTICK_Config>
 800082a:	2800      	cmp	r0, #0
 800082c:	d10b      	bne.n	8000846 <HAL_InitTick+0x3a>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800082e:	3001      	adds	r0, #1
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000830:	2c03      	cmp	r4, #3
 8000832:	d809      	bhi.n	8000848 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000834:	2200      	movs	r2, #0
 8000836:	0021      	movs	r1, r4
 8000838:	4240      	negs	r0, r0
 800083a:	f000 f82f 	bl	800089c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800083e:	4b05      	ldr	r3, [pc, #20]	@ (8000854 <HAL_InitTick+0x48>)
 8000840:	601c      	str	r4, [r3, #0]
  }

   /* Return function status */
  return HAL_OK;
 8000842:	2000      	movs	r0, #0
 8000844:	e000      	b.n	8000848 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000846:	2001      	movs	r0, #1
}
 8000848:	bd70      	pop	{r4, r5, r6, pc}
 800084a:	46c0      	nop			@ (mov r8, r8)
 800084c:	20000000 	.word	0x20000000
 8000850:	20000004 	.word	0x20000004
 8000854:	20000008 	.word	0x20000008

08000858 <HAL_Init>:
{
 8000858:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800085a:	4a06      	ldr	r2, [pc, #24]	@ (8000874 <HAL_Init+0x1c>)
 800085c:	6813      	ldr	r3, [r2, #0]
 800085e:	2110      	movs	r1, #16
 8000860:	430b      	orrs	r3, r1
 8000862:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000864:	2000      	movs	r0, #0
 8000866:	f7ff ffd1 	bl	800080c <HAL_InitTick>
  HAL_MspInit();
 800086a:	f7ff ff2d 	bl	80006c8 <HAL_MspInit>
}
 800086e:	2000      	movs	r0, #0
 8000870:	bd10      	pop	{r4, pc}
 8000872:	46c0      	nop			@ (mov r8, r8)
 8000874:	40022000 	.word	0x40022000

08000878 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000878:	4a03      	ldr	r2, [pc, #12]	@ (8000888 <HAL_IncTick+0x10>)
 800087a:	6811      	ldr	r1, [r2, #0]
 800087c:	4b03      	ldr	r3, [pc, #12]	@ (800088c <HAL_IncTick+0x14>)
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	185b      	adds	r3, r3, r1
 8000882:	6013      	str	r3, [r2, #0]
}
 8000884:	4770      	bx	lr
 8000886:	46c0      	nop			@ (mov r8, r8)
 8000888:	200001fc 	.word	0x200001fc
 800088c:	20000004 	.word	0x20000004

08000890 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000890:	4b01      	ldr	r3, [pc, #4]	@ (8000898 <HAL_GetTick+0x8>)
 8000892:	6818      	ldr	r0, [r3, #0]
}
 8000894:	4770      	bx	lr
 8000896:	46c0      	nop			@ (mov r8, r8)
 8000898:	200001fc 	.word	0x200001fc

0800089c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800089c:	b570      	push	{r4, r5, r6, lr}
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 800089e:	2800      	cmp	r0, #0
 80008a0:	db14      	blt.n	80008cc <HAL_NVIC_SetPriority+0x30>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008a2:	0884      	lsrs	r4, r0, #2
 80008a4:	00a4      	lsls	r4, r4, #2
 80008a6:	4b14      	ldr	r3, [pc, #80]	@ (80008f8 <HAL_NVIC_SetPriority+0x5c>)
 80008a8:	469c      	mov	ip, r3
 80008aa:	4464      	add	r4, ip
 80008ac:	26c0      	movs	r6, #192	@ 0xc0
 80008ae:	00b6      	lsls	r6, r6, #2
 80008b0:	59a5      	ldr	r5, [r4, r6]
 80008b2:	2203      	movs	r2, #3
 80008b4:	4002      	ands	r2, r0
 80008b6:	00d2      	lsls	r2, r2, #3
 80008b8:	23ff      	movs	r3, #255	@ 0xff
 80008ba:	0018      	movs	r0, r3
 80008bc:	4090      	lsls	r0, r2
 80008be:	4385      	bics	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008c0:	0189      	lsls	r1, r1, #6
 80008c2:	400b      	ands	r3, r1
 80008c4:	4093      	lsls	r3, r2
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008c6:	432b      	orrs	r3, r5
 80008c8:	51a3      	str	r3, [r4, r6]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 80008ca:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008cc:	230f      	movs	r3, #15
 80008ce:	4003      	ands	r3, r0
 80008d0:	3b08      	subs	r3, #8
 80008d2:	089b      	lsrs	r3, r3, #2
 80008d4:	009b      	lsls	r3, r3, #2
 80008d6:	4a09      	ldr	r2, [pc, #36]	@ (80008fc <HAL_NVIC_SetPriority+0x60>)
 80008d8:	4694      	mov	ip, r2
 80008da:	4463      	add	r3, ip
 80008dc:	69dc      	ldr	r4, [r3, #28]
 80008de:	2203      	movs	r2, #3
 80008e0:	4010      	ands	r0, r2
 80008e2:	00c0      	lsls	r0, r0, #3
 80008e4:	32fc      	adds	r2, #252	@ 0xfc
 80008e6:	0015      	movs	r5, r2
 80008e8:	4085      	lsls	r5, r0
 80008ea:	43ac      	bics	r4, r5
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008ec:	0189      	lsls	r1, r1, #6
 80008ee:	400a      	ands	r2, r1
 80008f0:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008f2:	4322      	orrs	r2, r4
 80008f4:	61da      	str	r2, [r3, #28]
 80008f6:	e7e8      	b.n	80008ca <HAL_NVIC_SetPriority+0x2e>
 80008f8:	e000e100 	.word	0xe000e100
 80008fc:	e000ed00 	.word	0xe000ed00

08000900 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000900:	2800      	cmp	r0, #0
 8000902:	db05      	blt.n	8000910 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000904:	221f      	movs	r2, #31
 8000906:	4002      	ands	r2, r0
 8000908:	2301      	movs	r3, #1
 800090a:	4093      	lsls	r3, r2
 800090c:	4a01      	ldr	r2, [pc, #4]	@ (8000914 <HAL_NVIC_EnableIRQ+0x14>)
 800090e:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000910:	4770      	bx	lr
 8000912:	46c0      	nop			@ (mov r8, r8)
 8000914:	e000e100 	.word	0xe000e100

08000918 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000918:	3801      	subs	r0, #1
 800091a:	2380      	movs	r3, #128	@ 0x80
 800091c:	045b      	lsls	r3, r3, #17
 800091e:	4298      	cmp	r0, r3
 8000920:	d20f      	bcs.n	8000942 <HAL_SYSTICK_Config+0x2a>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000922:	4a09      	ldr	r2, [pc, #36]	@ (8000948 <HAL_SYSTICK_Config+0x30>)
 8000924:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000926:	4809      	ldr	r0, [pc, #36]	@ (800094c <HAL_SYSTICK_Config+0x34>)
 8000928:	6a03      	ldr	r3, [r0, #32]
 800092a:	021b      	lsls	r3, r3, #8
 800092c:	0a1b      	lsrs	r3, r3, #8
 800092e:	21c0      	movs	r1, #192	@ 0xc0
 8000930:	0609      	lsls	r1, r1, #24
 8000932:	430b      	orrs	r3, r1
 8000934:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000936:	2300      	movs	r3, #0
 8000938:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800093a:	3307      	adds	r3, #7
 800093c:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800093e:	2000      	movs	r0, #0
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000940:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000942:	2001      	movs	r0, #1
   return SysTick_Config(TicksNumb);
 8000944:	e7fc      	b.n	8000940 <HAL_SYSTICK_Config+0x28>
 8000946:	46c0      	nop			@ (mov r8, r8)
 8000948:	e000e010 	.word	0xe000e010
 800094c:	e000ed00 	.word	0xe000ed00

08000950 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000950:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000952:	46de      	mov	lr, fp
 8000954:	4657      	mov	r7, sl
 8000956:	464e      	mov	r6, r9
 8000958:	4645      	mov	r5, r8
 800095a:	b5e0      	push	{r5, r6, r7, lr}
 800095c:	b085      	sub	sp, #20
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800095e:	680e      	ldr	r6, [r1, #0]
 8000960:	2e00      	cmp	r6, #0
 8000962:	d100      	bne.n	8000966 <HAL_GPIO_Init+0x16>
 8000964:	e0ea      	b.n	8000b3c <HAL_GPIO_Init+0x1ec>
 8000966:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8000968:	2300      	movs	r3, #0

    if (iocurrent != 0x00u)
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800096a:	2403      	movs	r4, #3
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800096c:	4d77      	ldr	r5, [pc, #476]	@ (8000b4c <HAL_GPIO_Init+0x1fc>)
 800096e:	46ab      	mov	fp, r5
 8000970:	e051      	b.n	8000a16 <HAL_GPIO_Init+0xc6>
        temp = GPIOx->OSPEEDR;
 8000972:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000974:	0027      	movs	r7, r4
 8000976:	4097      	lsls	r7, r2
 8000978:	43be      	bics	r6, r7
 800097a:	46b0      	mov	r8, r6
        temp |= (GPIO_Init->Speed << (position * 2u));
 800097c:	68ce      	ldr	r6, [r1, #12]
 800097e:	4096      	lsls	r6, r2
 8000980:	4645      	mov	r5, r8
 8000982:	432e      	orrs	r6, r5
        GPIOx->OSPEEDR = temp;
 8000984:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8000986:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000988:	4665      	mov	r5, ip
 800098a:	43ae      	bics	r6, r5
 800098c:	46b4      	mov	ip, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800098e:	684e      	ldr	r6, [r1, #4]
 8000990:	0936      	lsrs	r6, r6, #4
 8000992:	2501      	movs	r5, #1
 8000994:	402e      	ands	r6, r5
 8000996:	409e      	lsls	r6, r3
 8000998:	4665      	mov	r5, ip
 800099a:	432e      	orrs	r6, r5
        GPIOx->OTYPER = temp;
 800099c:	6046      	str	r6, [r0, #4]
 800099e:	e047      	b.n	8000a30 <HAL_GPIO_Init+0xe0>

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80009a0:	2500      	movs	r5, #0
 80009a2:	46ac      	mov	ip, r5
 80009a4:	4667      	mov	r7, ip
 80009a6:	464d      	mov	r5, r9
 80009a8:	40af      	lsls	r7, r5
 80009aa:	46bc      	mov	ip, r7
 80009ac:	4647      	mov	r7, r8
 80009ae:	4665      	mov	r5, ip
 80009b0:	432f      	orrs	r7, r5
        SYSCFG->EXTICR[position >> 2u] = temp;
 80009b2:	60b7      	str	r7, [r6, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80009b4:	4d66      	ldr	r5, [pc, #408]	@ (8000b50 <HAL_GPIO_Init+0x200>)
 80009b6:	68ae      	ldr	r6, [r5, #8]
        temp &= ~(iocurrent);
 80009b8:	9d01      	ldr	r5, [sp, #4]
 80009ba:	43ed      	mvns	r5, r5
 80009bc:	46ac      	mov	ip, r5
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80009be:	684d      	ldr	r5, [r1, #4]
 80009c0:	2780      	movs	r7, #128	@ 0x80
 80009c2:	037f      	lsls	r7, r7, #13
 80009c4:	423d      	tst	r5, r7
 80009c6:	d000      	beq.n	80009ca <HAL_GPIO_Init+0x7a>
 80009c8:	e0ac      	b.n	8000b24 <HAL_GPIO_Init+0x1d4>
        temp &= ~(iocurrent);
 80009ca:	4665      	mov	r5, ip
 80009cc:	402e      	ands	r6, r5
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 80009ce:	4d60      	ldr	r5, [pc, #384]	@ (8000b50 <HAL_GPIO_Init+0x200>)
 80009d0:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR;
 80009d2:	68ee      	ldr	r6, [r5, #12]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80009d4:	684d      	ldr	r5, [r1, #4]
 80009d6:	02ad      	lsls	r5, r5, #10
 80009d8:	d500      	bpl.n	80009dc <HAL_GPIO_Init+0x8c>
 80009da:	e0a6      	b.n	8000b2a <HAL_GPIO_Init+0x1da>
        temp &= ~(iocurrent);
 80009dc:	4665      	mov	r5, ip
 80009de:	402e      	ands	r6, r5
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 80009e0:	4d5b      	ldr	r5, [pc, #364]	@ (8000b50 <HAL_GPIO_Init+0x200>)
 80009e2:	60ee      	str	r6, [r5, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80009e4:	686e      	ldr	r6, [r5, #4]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80009e6:	684d      	ldr	r5, [r1, #4]
 80009e8:	03ad      	lsls	r5, r5, #14
 80009ea:	d500      	bpl.n	80009ee <HAL_GPIO_Init+0x9e>
 80009ec:	e0a0      	b.n	8000b30 <HAL_GPIO_Init+0x1e0>
        temp &= ~(iocurrent);
 80009ee:	4665      	mov	r5, ip
 80009f0:	402e      	ands	r6, r5
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 80009f2:	4d57      	ldr	r5, [pc, #348]	@ (8000b50 <HAL_GPIO_Init+0x200>)
 80009f4:	606e      	str	r6, [r5, #4]

        temp = EXTI->IMR;
 80009f6:	682e      	ldr	r6, [r5, #0]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80009f8:	684d      	ldr	r5, [r1, #4]
 80009fa:	03ed      	lsls	r5, r5, #15
 80009fc:	d500      	bpl.n	8000a00 <HAL_GPIO_Init+0xb0>
 80009fe:	e09a      	b.n	8000b36 <HAL_GPIO_Init+0x1e6>
        temp &= ~(iocurrent);
 8000a00:	4665      	mov	r5, ip
 8000a02:	402e      	ands	r6, r5
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 8000a04:	4d52      	ldr	r5, [pc, #328]	@ (8000b50 <HAL_GPIO_Init+0x200>)
 8000a06:	602e      	str	r6, [r5, #0]
      }
    }

    position++;
 8000a08:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a0a:	680e      	ldr	r6, [r1, #0]
 8000a0c:	3202      	adds	r2, #2
 8000a0e:	0037      	movs	r7, r6
 8000a10:	40df      	lsrs	r7, r3
 8000a12:	d100      	bne.n	8000a16 <HAL_GPIO_Init+0xc6>
 8000a14:	e092      	b.n	8000b3c <HAL_GPIO_Init+0x1ec>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a16:	2701      	movs	r7, #1
 8000a18:	409f      	lsls	r7, r3
 8000a1a:	46bc      	mov	ip, r7
 8000a1c:	4037      	ands	r7, r6
 8000a1e:	9701      	str	r7, [sp, #4]
    if (iocurrent != 0x00u)
 8000a20:	4667      	mov	r7, ip
 8000a22:	423e      	tst	r6, r7
 8000a24:	d0f0      	beq.n	8000a08 <HAL_GPIO_Init+0xb8>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000a26:	684e      	ldr	r6, [r1, #4]
 8000a28:	4026      	ands	r6, r4
 8000a2a:	3e01      	subs	r6, #1
 8000a2c:	2e01      	cmp	r6, #1
 8000a2e:	d9a0      	bls.n	8000972 <HAL_GPIO_Init+0x22>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a30:	684e      	ldr	r6, [r1, #4]
 8000a32:	4026      	ands	r6, r4
 8000a34:	2e03      	cmp	r6, #3
 8000a36:	d027      	beq.n	8000a88 <HAL_GPIO_Init+0x138>
        temp = GPIOx->PUPDR;
 8000a38:	68c6      	ldr	r6, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000a3a:	0027      	movs	r7, r4
 8000a3c:	4097      	lsls	r7, r2
 8000a3e:	43be      	bics	r6, r7
 8000a40:	46b4      	mov	ip, r6
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a42:	688e      	ldr	r6, [r1, #8]
 8000a44:	4096      	lsls	r6, r2
 8000a46:	4667      	mov	r7, ip
 8000a48:	433e      	orrs	r6, r7
        GPIOx->PUPDR = temp;
 8000a4a:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a4c:	684e      	ldr	r6, [r1, #4]
 8000a4e:	4026      	ands	r6, r4
 8000a50:	2e02      	cmp	r6, #2
 8000a52:	d119      	bne.n	8000a88 <HAL_GPIO_Init+0x138>
        temp = GPIOx->AFR[position >> 3u];
 8000a54:	08de      	lsrs	r6, r3, #3
 8000a56:	00b6      	lsls	r6, r6, #2
 8000a58:	1986      	adds	r6, r0, r6
 8000a5a:	6a35      	ldr	r5, [r6, #32]
 8000a5c:	46a9      	mov	r9, r5
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a5e:	2507      	movs	r5, #7
 8000a60:	002f      	movs	r7, r5
 8000a62:	401f      	ands	r7, r3
 8000a64:	00bd      	lsls	r5, r7, #2
 8000a66:	46ac      	mov	ip, r5
 8000a68:	270f      	movs	r7, #15
 8000a6a:	40af      	lsls	r7, r5
 8000a6c:	46b8      	mov	r8, r7
 8000a6e:	464f      	mov	r7, r9
 8000a70:	4645      	mov	r5, r8
 8000a72:	43af      	bics	r7, r5
 8000a74:	46b9      	mov	r9, r7
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a76:	690d      	ldr	r5, [r1, #16]
 8000a78:	002f      	movs	r7, r5
 8000a7a:	4665      	mov	r5, ip
 8000a7c:	40af      	lsls	r7, r5
 8000a7e:	46bc      	mov	ip, r7
 8000a80:	464f      	mov	r7, r9
 8000a82:	4665      	mov	r5, ip
 8000a84:	432f      	orrs	r7, r5
        GPIOx->AFR[position >> 3u] = temp;
 8000a86:	6237      	str	r7, [r6, #32]
      temp = GPIOx->MODER;
 8000a88:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000a8a:	0027      	movs	r7, r4
 8000a8c:	4097      	lsls	r7, r2
 8000a8e:	43be      	bics	r6, r7
 8000a90:	46b4      	mov	ip, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a92:	684e      	ldr	r6, [r1, #4]
 8000a94:	4026      	ands	r6, r4
 8000a96:	4096      	lsls	r6, r2
 8000a98:	4667      	mov	r7, ip
 8000a9a:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 8000a9c:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000a9e:	684e      	ldr	r6, [r1, #4]
 8000aa0:	27c0      	movs	r7, #192	@ 0xc0
 8000aa2:	02bf      	lsls	r7, r7, #10
 8000aa4:	423e      	tst	r6, r7
 8000aa6:	d0af      	beq.n	8000a08 <HAL_GPIO_Init+0xb8>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aa8:	465e      	mov	r6, fp
 8000aaa:	69b6      	ldr	r6, [r6, #24]
 8000aac:	2701      	movs	r7, #1
 8000aae:	433e      	orrs	r6, r7
 8000ab0:	465d      	mov	r5, fp
 8000ab2:	61ae      	str	r6, [r5, #24]
 8000ab4:	69ae      	ldr	r6, [r5, #24]
 8000ab6:	403e      	ands	r6, r7
 8000ab8:	9603      	str	r6, [sp, #12]
 8000aba:	9e03      	ldr	r6, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 8000abc:	089e      	lsrs	r6, r3, #2
 8000abe:	00b6      	lsls	r6, r6, #2
 8000ac0:	4d24      	ldr	r5, [pc, #144]	@ (8000b54 <HAL_GPIO_Init+0x204>)
 8000ac2:	46ac      	mov	ip, r5
 8000ac4:	4466      	add	r6, ip
 8000ac6:	68b5      	ldr	r5, [r6, #8]
 8000ac8:	46a8      	mov	r8, r5
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000aca:	0027      	movs	r7, r4
 8000acc:	401f      	ands	r7, r3
 8000ace:	00bd      	lsls	r5, r7, #2
 8000ad0:	46a9      	mov	r9, r5
 8000ad2:	270f      	movs	r7, #15
 8000ad4:	40af      	lsls	r7, r5
 8000ad6:	46bc      	mov	ip, r7
 8000ad8:	4647      	mov	r7, r8
 8000ada:	4665      	mov	r5, ip
 8000adc:	43af      	bics	r7, r5
 8000ade:	46b8      	mov	r8, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ae0:	2590      	movs	r5, #144	@ 0x90
 8000ae2:	05ed      	lsls	r5, r5, #23
 8000ae4:	42a8      	cmp	r0, r5
 8000ae6:	d100      	bne.n	8000aea <HAL_GPIO_Init+0x19a>
 8000ae8:	e75a      	b.n	80009a0 <HAL_GPIO_Init+0x50>
 8000aea:	4d1b      	ldr	r5, [pc, #108]	@ (8000b58 <HAL_GPIO_Init+0x208>)
 8000aec:	42a8      	cmp	r0, r5
 8000aee:	d010      	beq.n	8000b12 <HAL_GPIO_Init+0x1c2>
 8000af0:	4d1a      	ldr	r5, [pc, #104]	@ (8000b5c <HAL_GPIO_Init+0x20c>)
 8000af2:	42a8      	cmp	r0, r5
 8000af4:	d010      	beq.n	8000b18 <HAL_GPIO_Init+0x1c8>
 8000af6:	4d1a      	ldr	r5, [pc, #104]	@ (8000b60 <HAL_GPIO_Init+0x210>)
 8000af8:	42a8      	cmp	r0, r5
 8000afa:	d010      	beq.n	8000b1e <HAL_GPIO_Init+0x1ce>
 8000afc:	4d19      	ldr	r5, [pc, #100]	@ (8000b64 <HAL_GPIO_Init+0x214>)
 8000afe:	46ac      	mov	ip, r5
 8000b00:	4484      	add	ip, r0
 8000b02:	4665      	mov	r5, ip
 8000b04:	1e6f      	subs	r7, r5, #1
 8000b06:	41bd      	sbcs	r5, r7
 8000b08:	46ac      	mov	ip, r5
 8000b0a:	2504      	movs	r5, #4
 8000b0c:	46aa      	mov	sl, r5
 8000b0e:	44d4      	add	ip, sl
 8000b10:	e748      	b.n	80009a4 <HAL_GPIO_Init+0x54>
 8000b12:	2501      	movs	r5, #1
 8000b14:	46ac      	mov	ip, r5
 8000b16:	e745      	b.n	80009a4 <HAL_GPIO_Init+0x54>
 8000b18:	2502      	movs	r5, #2
 8000b1a:	46ac      	mov	ip, r5
 8000b1c:	e742      	b.n	80009a4 <HAL_GPIO_Init+0x54>
 8000b1e:	2503      	movs	r5, #3
 8000b20:	46ac      	mov	ip, r5
 8000b22:	e73f      	b.n	80009a4 <HAL_GPIO_Init+0x54>
          temp |= iocurrent;
 8000b24:	9d01      	ldr	r5, [sp, #4]
 8000b26:	432e      	orrs	r6, r5
 8000b28:	e751      	b.n	80009ce <HAL_GPIO_Init+0x7e>
          temp |= iocurrent;
 8000b2a:	9d01      	ldr	r5, [sp, #4]
 8000b2c:	432e      	orrs	r6, r5
 8000b2e:	e757      	b.n	80009e0 <HAL_GPIO_Init+0x90>
          temp |= iocurrent;
 8000b30:	9d01      	ldr	r5, [sp, #4]
 8000b32:	432e      	orrs	r6, r5
 8000b34:	e75d      	b.n	80009f2 <HAL_GPIO_Init+0xa2>
          temp |= iocurrent;
 8000b36:	9d01      	ldr	r5, [sp, #4]
 8000b38:	432e      	orrs	r6, r5
 8000b3a:	e763      	b.n	8000a04 <HAL_GPIO_Init+0xb4>
  } 
}
 8000b3c:	b005      	add	sp, #20
 8000b3e:	bcf0      	pop	{r4, r5, r6, r7}
 8000b40:	46bb      	mov	fp, r7
 8000b42:	46b2      	mov	sl, r6
 8000b44:	46a9      	mov	r9, r5
 8000b46:	46a0      	mov	r8, r4
 8000b48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b4a:	46c0      	nop			@ (mov r8, r8)
 8000b4c:	40021000 	.word	0x40021000
 8000b50:	40010400 	.word	0x40010400
 8000b54:	40010000 	.word	0x40010000
 8000b58:	48000400 	.word	0x48000400
 8000b5c:	48000800 	.word	0x48000800
 8000b60:	48000c00 	.word	0x48000c00
 8000b64:	b7fff000 	.word	0xb7fff000

08000b68 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b68:	2a00      	cmp	r2, #0
 8000b6a:	d001      	beq.n	8000b70 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b6c:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000b6e:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000b70:	6281      	str	r1, [r0, #40]	@ 0x28
}
 8000b72:	e7fc      	b.n	8000b6e <HAL_GPIO_WritePin+0x6>

08000b74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b76:	46ce      	mov	lr, r9
 8000b78:	4647      	mov	r7, r8
 8000b7a:	b580      	push	{r7, lr}
 8000b7c:	b083      	sub	sp, #12
 8000b7e:	1e04      	subs	r4, r0, #0
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000b80:	d100      	bne.n	8000b84 <HAL_RCC_OscConfig+0x10>
 8000b82:	e2a2      	b.n	80010ca <HAL_RCC_OscConfig+0x556>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b84:	6803      	ldr	r3, [r0, #0]
 8000b86:	07db      	lsls	r3, r3, #31
 8000b88:	d52b      	bpl.n	8000be2 <HAL_RCC_OscConfig+0x6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000b8a:	4bbc      	ldr	r3, [pc, #752]	@ (8000e7c <HAL_RCC_OscConfig+0x308>)
 8000b8c:	685a      	ldr	r2, [r3, #4]
 8000b8e:	230c      	movs	r3, #12
 8000b90:	4013      	ands	r3, r2
 8000b92:	2b04      	cmp	r3, #4
 8000b94:	d01d      	beq.n	8000bd2 <HAL_RCC_OscConfig+0x5e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000b96:	4bb9      	ldr	r3, [pc, #740]	@ (8000e7c <HAL_RCC_OscConfig+0x308>)
 8000b98:	685a      	ldr	r2, [r3, #4]
 8000b9a:	230c      	movs	r3, #12
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	2b08      	cmp	r3, #8
 8000ba0:	d00e      	beq.n	8000bc0 <HAL_RCC_OscConfig+0x4c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ba2:	6863      	ldr	r3, [r4, #4]
 8000ba4:	2b01      	cmp	r3, #1
 8000ba6:	d042      	beq.n	8000c2e <HAL_RCC_OscConfig+0xba>
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d159      	bne.n	8000c60 <HAL_RCC_OscConfig+0xec>
 8000bac:	4bb3      	ldr	r3, [pc, #716]	@ (8000e7c <HAL_RCC_OscConfig+0x308>)
 8000bae:	681a      	ldr	r2, [r3, #0]
 8000bb0:	49b3      	ldr	r1, [pc, #716]	@ (8000e80 <HAL_RCC_OscConfig+0x30c>)
 8000bb2:	400a      	ands	r2, r1
 8000bb4:	601a      	str	r2, [r3, #0]
 8000bb6:	681a      	ldr	r2, [r3, #0]
 8000bb8:	49b2      	ldr	r1, [pc, #712]	@ (8000e84 <HAL_RCC_OscConfig+0x310>)
 8000bba:	400a      	ands	r2, r1
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	e03c      	b.n	8000c3a <HAL_RCC_OscConfig+0xc6>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000bc0:	4bae      	ldr	r3, [pc, #696]	@ (8000e7c <HAL_RCC_OscConfig+0x308>)
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	22c0      	movs	r2, #192	@ 0xc0
 8000bc6:	0252      	lsls	r2, r2, #9
 8000bc8:	4013      	ands	r3, r2
 8000bca:	2280      	movs	r2, #128	@ 0x80
 8000bcc:	0252      	lsls	r2, r2, #9
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d1e7      	bne.n	8000ba2 <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bd2:	4baa      	ldr	r3, [pc, #680]	@ (8000e7c <HAL_RCC_OscConfig+0x308>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	039b      	lsls	r3, r3, #14
 8000bd8:	d503      	bpl.n	8000be2 <HAL_RCC_OscConfig+0x6e>
 8000bda:	6863      	ldr	r3, [r4, #4]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d100      	bne.n	8000be2 <HAL_RCC_OscConfig+0x6e>
 8000be0:	e279      	b.n	80010d6 <HAL_RCC_OscConfig+0x562>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000be2:	6823      	ldr	r3, [r4, #0]
 8000be4:	079b      	lsls	r3, r3, #30
 8000be6:	d57d      	bpl.n	8000ce4 <HAL_RCC_OscConfig+0x170>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000be8:	4ba4      	ldr	r3, [pc, #656]	@ (8000e7c <HAL_RCC_OscConfig+0x308>)
 8000bea:	685b      	ldr	r3, [r3, #4]
 8000bec:	220c      	movs	r2, #12
 8000bee:	421a      	tst	r2, r3
 8000bf0:	d067      	beq.n	8000cc2 <HAL_RCC_OscConfig+0x14e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000bf2:	4ba2      	ldr	r3, [pc, #648]	@ (8000e7c <HAL_RCC_OscConfig+0x308>)
 8000bf4:	685a      	ldr	r2, [r3, #4]
 8000bf6:	230c      	movs	r3, #12
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	2b08      	cmp	r3, #8
 8000bfc:	d058      	beq.n	8000cb0 <HAL_RCC_OscConfig+0x13c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000bfe:	68e3      	ldr	r3, [r4, #12]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d100      	bne.n	8000c06 <HAL_RCC_OscConfig+0x92>
 8000c04:	e091      	b.n	8000d2a <HAL_RCC_OscConfig+0x1b6>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000c06:	4a9d      	ldr	r2, [pc, #628]	@ (8000e7c <HAL_RCC_OscConfig+0x308>)
 8000c08:	6813      	ldr	r3, [r2, #0]
 8000c0a:	2101      	movs	r1, #1
 8000c0c:	430b      	orrs	r3, r1
 8000c0e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c10:	f7ff fe3e 	bl	8000890 <HAL_GetTick>
 8000c14:	0005      	movs	r5, r0
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c16:	4f99      	ldr	r7, [pc, #612]	@ (8000e7c <HAL_RCC_OscConfig+0x308>)
 8000c18:	2602      	movs	r6, #2
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	421e      	tst	r6, r3
 8000c1e:	d17b      	bne.n	8000d18 <HAL_RCC_OscConfig+0x1a4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c20:	f7ff fe36 	bl	8000890 <HAL_GetTick>
 8000c24:	1b40      	subs	r0, r0, r5
 8000c26:	2802      	cmp	r0, #2
 8000c28:	d9f7      	bls.n	8000c1a <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_TIMEOUT;
 8000c2a:	2003      	movs	r0, #3
 8000c2c:	e24e      	b.n	80010cc <HAL_RCC_OscConfig+0x558>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c2e:	4a93      	ldr	r2, [pc, #588]	@ (8000e7c <HAL_RCC_OscConfig+0x308>)
 8000c30:	6811      	ldr	r1, [r2, #0]
 8000c32:	2380      	movs	r3, #128	@ 0x80
 8000c34:	025b      	lsls	r3, r3, #9
 8000c36:	430b      	orrs	r3, r1
 8000c38:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c3a:	6863      	ldr	r3, [r4, #4]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d027      	beq.n	8000c90 <HAL_RCC_OscConfig+0x11c>
        tickstart = HAL_GetTick();
 8000c40:	f7ff fe26 	bl	8000890 <HAL_GetTick>
 8000c44:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c46:	4f8d      	ldr	r7, [pc, #564]	@ (8000e7c <HAL_RCC_OscConfig+0x308>)
 8000c48:	2680      	movs	r6, #128	@ 0x80
 8000c4a:	02b6      	lsls	r6, r6, #10
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	4233      	tst	r3, r6
 8000c50:	d1c7      	bne.n	8000be2 <HAL_RCC_OscConfig+0x6e>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c52:	f7ff fe1d 	bl	8000890 <HAL_GetTick>
 8000c56:	1b40      	subs	r0, r0, r5
 8000c58:	2864      	cmp	r0, #100	@ 0x64
 8000c5a:	d9f7      	bls.n	8000c4c <HAL_RCC_OscConfig+0xd8>
            return HAL_TIMEOUT;
 8000c5c:	2003      	movs	r0, #3
 8000c5e:	e235      	b.n	80010cc <HAL_RCC_OscConfig+0x558>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c60:	2b05      	cmp	r3, #5
 8000c62:	d009      	beq.n	8000c78 <HAL_RCC_OscConfig+0x104>
 8000c64:	4b85      	ldr	r3, [pc, #532]	@ (8000e7c <HAL_RCC_OscConfig+0x308>)
 8000c66:	681a      	ldr	r2, [r3, #0]
 8000c68:	4985      	ldr	r1, [pc, #532]	@ (8000e80 <HAL_RCC_OscConfig+0x30c>)
 8000c6a:	400a      	ands	r2, r1
 8000c6c:	601a      	str	r2, [r3, #0]
 8000c6e:	681a      	ldr	r2, [r3, #0]
 8000c70:	4984      	ldr	r1, [pc, #528]	@ (8000e84 <HAL_RCC_OscConfig+0x310>)
 8000c72:	400a      	ands	r2, r1
 8000c74:	601a      	str	r2, [r3, #0]
 8000c76:	e7e0      	b.n	8000c3a <HAL_RCC_OscConfig+0xc6>
 8000c78:	4b80      	ldr	r3, [pc, #512]	@ (8000e7c <HAL_RCC_OscConfig+0x308>)
 8000c7a:	6819      	ldr	r1, [r3, #0]
 8000c7c:	2280      	movs	r2, #128	@ 0x80
 8000c7e:	02d2      	lsls	r2, r2, #11
 8000c80:	430a      	orrs	r2, r1
 8000c82:	601a      	str	r2, [r3, #0]
 8000c84:	6819      	ldr	r1, [r3, #0]
 8000c86:	2280      	movs	r2, #128	@ 0x80
 8000c88:	0252      	lsls	r2, r2, #9
 8000c8a:	430a      	orrs	r2, r1
 8000c8c:	601a      	str	r2, [r3, #0]
 8000c8e:	e7d4      	b.n	8000c3a <HAL_RCC_OscConfig+0xc6>
        tickstart = HAL_GetTick();
 8000c90:	f7ff fdfe 	bl	8000890 <HAL_GetTick>
 8000c94:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c96:	4f79      	ldr	r7, [pc, #484]	@ (8000e7c <HAL_RCC_OscConfig+0x308>)
 8000c98:	2680      	movs	r6, #128	@ 0x80
 8000c9a:	02b6      	lsls	r6, r6, #10
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	4233      	tst	r3, r6
 8000ca0:	d09f      	beq.n	8000be2 <HAL_RCC_OscConfig+0x6e>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ca2:	f7ff fdf5 	bl	8000890 <HAL_GetTick>
 8000ca6:	1b40      	subs	r0, r0, r5
 8000ca8:	2864      	cmp	r0, #100	@ 0x64
 8000caa:	d9f7      	bls.n	8000c9c <HAL_RCC_OscConfig+0x128>
            return HAL_TIMEOUT;
 8000cac:	2003      	movs	r0, #3
 8000cae:	e20d      	b.n	80010cc <HAL_RCC_OscConfig+0x558>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000cb0:	4b72      	ldr	r3, [pc, #456]	@ (8000e7c <HAL_RCC_OscConfig+0x308>)
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	22c0      	movs	r2, #192	@ 0xc0
 8000cb6:	0252      	lsls	r2, r2, #9
 8000cb8:	4013      	ands	r3, r2
 8000cba:	2280      	movs	r2, #128	@ 0x80
 8000cbc:	0212      	lsls	r2, r2, #8
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d19d      	bne.n	8000bfe <HAL_RCC_OscConfig+0x8a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cc2:	4b6e      	ldr	r3, [pc, #440]	@ (8000e7c <HAL_RCC_OscConfig+0x308>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	079b      	lsls	r3, r3, #30
 8000cc8:	d504      	bpl.n	8000cd4 <HAL_RCC_OscConfig+0x160>
 8000cca:	68e3      	ldr	r3, [r4, #12]
        return HAL_ERROR;
 8000ccc:	2001      	movs	r0, #1
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cce:	2b01      	cmp	r3, #1
 8000cd0:	d000      	beq.n	8000cd4 <HAL_RCC_OscConfig+0x160>
 8000cd2:	e1fb      	b.n	80010cc <HAL_RCC_OscConfig+0x558>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cd4:	4969      	ldr	r1, [pc, #420]	@ (8000e7c <HAL_RCC_OscConfig+0x308>)
 8000cd6:	680a      	ldr	r2, [r1, #0]
 8000cd8:	6923      	ldr	r3, [r4, #16]
 8000cda:	00db      	lsls	r3, r3, #3
 8000cdc:	20f8      	movs	r0, #248	@ 0xf8
 8000cde:	4382      	bics	r2, r0
 8000ce0:	4313      	orrs	r3, r2
 8000ce2:	600b      	str	r3, [r1, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ce4:	6823      	ldr	r3, [r4, #0]
 8000ce6:	071b      	lsls	r3, r3, #28
 8000ce8:	d547      	bpl.n	8000d7a <HAL_RCC_OscConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000cea:	69e3      	ldr	r3, [r4, #28]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d030      	beq.n	8000d52 <HAL_RCC_OscConfig+0x1de>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000cf0:	4a62      	ldr	r2, [pc, #392]	@ (8000e7c <HAL_RCC_OscConfig+0x308>)
 8000cf2:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 8000cf4:	2101      	movs	r1, #1
 8000cf6:	430b      	orrs	r3, r1
 8000cf8:	6253      	str	r3, [r2, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000cfa:	f7ff fdc9 	bl	8000890 <HAL_GetTick>
 8000cfe:	0005      	movs	r5, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d00:	4f5e      	ldr	r7, [pc, #376]	@ (8000e7c <HAL_RCC_OscConfig+0x308>)
 8000d02:	2602      	movs	r6, #2
 8000d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d06:	421e      	tst	r6, r3
 8000d08:	d137      	bne.n	8000d7a <HAL_RCC_OscConfig+0x206>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d0a:	f7ff fdc1 	bl	8000890 <HAL_GetTick>
 8000d0e:	1b40      	subs	r0, r0, r5
 8000d10:	2802      	cmp	r0, #2
 8000d12:	d9f7      	bls.n	8000d04 <HAL_RCC_OscConfig+0x190>
        {
          return HAL_TIMEOUT;
 8000d14:	2003      	movs	r0, #3
 8000d16:	e1d9      	b.n	80010cc <HAL_RCC_OscConfig+0x558>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d18:	4958      	ldr	r1, [pc, #352]	@ (8000e7c <HAL_RCC_OscConfig+0x308>)
 8000d1a:	680a      	ldr	r2, [r1, #0]
 8000d1c:	6923      	ldr	r3, [r4, #16]
 8000d1e:	00db      	lsls	r3, r3, #3
 8000d20:	20f8      	movs	r0, #248	@ 0xf8
 8000d22:	4382      	bics	r2, r0
 8000d24:	4313      	orrs	r3, r2
 8000d26:	600b      	str	r3, [r1, #0]
 8000d28:	e7dc      	b.n	8000ce4 <HAL_RCC_OscConfig+0x170>
        __HAL_RCC_HSI_DISABLE();
 8000d2a:	4a54      	ldr	r2, [pc, #336]	@ (8000e7c <HAL_RCC_OscConfig+0x308>)
 8000d2c:	6813      	ldr	r3, [r2, #0]
 8000d2e:	2101      	movs	r1, #1
 8000d30:	438b      	bics	r3, r1
 8000d32:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8000d34:	f7ff fdac 	bl	8000890 <HAL_GetTick>
 8000d38:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d3a:	4f50      	ldr	r7, [pc, #320]	@ (8000e7c <HAL_RCC_OscConfig+0x308>)
 8000d3c:	2602      	movs	r6, #2
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	421e      	tst	r6, r3
 8000d42:	d0cf      	beq.n	8000ce4 <HAL_RCC_OscConfig+0x170>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d44:	f7ff fda4 	bl	8000890 <HAL_GetTick>
 8000d48:	1b40      	subs	r0, r0, r5
 8000d4a:	2802      	cmp	r0, #2
 8000d4c:	d9f7      	bls.n	8000d3e <HAL_RCC_OscConfig+0x1ca>
            return HAL_TIMEOUT;
 8000d4e:	2003      	movs	r0, #3
 8000d50:	e1bc      	b.n	80010cc <HAL_RCC_OscConfig+0x558>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d52:	4a4a      	ldr	r2, [pc, #296]	@ (8000e7c <HAL_RCC_OscConfig+0x308>)
 8000d54:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 8000d56:	2101      	movs	r1, #1
 8000d58:	438b      	bics	r3, r1
 8000d5a:	6253      	str	r3, [r2, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d5c:	f7ff fd98 	bl	8000890 <HAL_GetTick>
 8000d60:	0005      	movs	r5, r0
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d62:	4f46      	ldr	r7, [pc, #280]	@ (8000e7c <HAL_RCC_OscConfig+0x308>)
 8000d64:	2602      	movs	r6, #2
 8000d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d68:	421e      	tst	r6, r3
 8000d6a:	d006      	beq.n	8000d7a <HAL_RCC_OscConfig+0x206>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d6c:	f7ff fd90 	bl	8000890 <HAL_GetTick>
 8000d70:	1b40      	subs	r0, r0, r5
 8000d72:	2802      	cmp	r0, #2
 8000d74:	d9f7      	bls.n	8000d66 <HAL_RCC_OscConfig+0x1f2>
        {
          return HAL_TIMEOUT;
 8000d76:	2003      	movs	r0, #3
 8000d78:	e1a8      	b.n	80010cc <HAL_RCC_OscConfig+0x558>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d7a:	6823      	ldr	r3, [r4, #0]
 8000d7c:	075b      	lsls	r3, r3, #29
 8000d7e:	d400      	bmi.n	8000d82 <HAL_RCC_OscConfig+0x20e>
 8000d80:	e089      	b.n	8000e96 <HAL_RCC_OscConfig+0x322>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d82:	4b3e      	ldr	r3, [pc, #248]	@ (8000e7c <HAL_RCC_OscConfig+0x308>)
 8000d84:	69db      	ldr	r3, [r3, #28]
    FlagStatus       pwrclkchanged = RESET;
 8000d86:	2200      	movs	r2, #0
 8000d88:	4691      	mov	r9, r2
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d8a:	00db      	lsls	r3, r3, #3
 8000d8c:	d40b      	bmi.n	8000da6 <HAL_RCC_OscConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d8e:	4b3b      	ldr	r3, [pc, #236]	@ (8000e7c <HAL_RCC_OscConfig+0x308>)
 8000d90:	69da      	ldr	r2, [r3, #28]
 8000d92:	2180      	movs	r1, #128	@ 0x80
 8000d94:	0549      	lsls	r1, r1, #21
 8000d96:	430a      	orrs	r2, r1
 8000d98:	61da      	str	r2, [r3, #28]
 8000d9a:	69db      	ldr	r3, [r3, #28]
 8000d9c:	400b      	ands	r3, r1
 8000d9e:	9301      	str	r3, [sp, #4]
 8000da0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000da2:	2301      	movs	r3, #1
 8000da4:	4699      	mov	r9, r3
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000da6:	4b38      	ldr	r3, [pc, #224]	@ (8000e88 <HAL_RCC_OscConfig+0x314>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	05db      	lsls	r3, r3, #23
 8000dac:	d50e      	bpl.n	8000dcc <HAL_RCC_OscConfig+0x258>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000dae:	68a3      	ldr	r3, [r4, #8]
 8000db0:	2b01      	cmp	r3, #1
 8000db2:	d021      	beq.n	8000df8 <HAL_RCC_OscConfig+0x284>
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d139      	bne.n	8000e2c <HAL_RCC_OscConfig+0x2b8>
 8000db8:	4b30      	ldr	r3, [pc, #192]	@ (8000e7c <HAL_RCC_OscConfig+0x308>)
 8000dba:	6a1a      	ldr	r2, [r3, #32]
 8000dbc:	2101      	movs	r1, #1
 8000dbe:	438a      	bics	r2, r1
 8000dc0:	621a      	str	r2, [r3, #32]
 8000dc2:	6a1a      	ldr	r2, [r3, #32]
 8000dc4:	3103      	adds	r1, #3
 8000dc6:	438a      	bics	r2, r1
 8000dc8:	621a      	str	r2, [r3, #32]
 8000dca:	e01a      	b.n	8000e02 <HAL_RCC_OscConfig+0x28e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000dcc:	4a2e      	ldr	r2, [pc, #184]	@ (8000e88 <HAL_RCC_OscConfig+0x314>)
 8000dce:	6811      	ldr	r1, [r2, #0]
 8000dd0:	2380      	movs	r3, #128	@ 0x80
 8000dd2:	005b      	lsls	r3, r3, #1
 8000dd4:	430b      	orrs	r3, r1
 8000dd6:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8000dd8:	f7ff fd5a 	bl	8000890 <HAL_GetTick>
 8000ddc:	0006      	movs	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000dde:	4d2a      	ldr	r5, [pc, #168]	@ (8000e88 <HAL_RCC_OscConfig+0x314>)
 8000de0:	2780      	movs	r7, #128	@ 0x80
 8000de2:	007f      	lsls	r7, r7, #1
 8000de4:	682b      	ldr	r3, [r5, #0]
 8000de6:	423b      	tst	r3, r7
 8000de8:	d1e1      	bne.n	8000dae <HAL_RCC_OscConfig+0x23a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000dea:	f7ff fd51 	bl	8000890 <HAL_GetTick>
 8000dee:	1b80      	subs	r0, r0, r6
 8000df0:	2864      	cmp	r0, #100	@ 0x64
 8000df2:	d9f7      	bls.n	8000de4 <HAL_RCC_OscConfig+0x270>
          return HAL_TIMEOUT;
 8000df4:	2003      	movs	r0, #3
 8000df6:	e169      	b.n	80010cc <HAL_RCC_OscConfig+0x558>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000df8:	4a20      	ldr	r2, [pc, #128]	@ (8000e7c <HAL_RCC_OscConfig+0x308>)
 8000dfa:	6a13      	ldr	r3, [r2, #32]
 8000dfc:	2101      	movs	r1, #1
 8000dfe:	430b      	orrs	r3, r1
 8000e00:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000e02:	68a3      	ldr	r3, [r4, #8]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d027      	beq.n	8000e58 <HAL_RCC_OscConfig+0x2e4>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e08:	f7ff fd42 	bl	8000890 <HAL_GetTick>
 8000e0c:	0006      	movs	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e0e:	4b1b      	ldr	r3, [pc, #108]	@ (8000e7c <HAL_RCC_OscConfig+0x308>)
 8000e10:	4698      	mov	r8, r3
 8000e12:	2702      	movs	r7, #2
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e14:	4d1d      	ldr	r5, [pc, #116]	@ (8000e8c <HAL_RCC_OscConfig+0x318>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e16:	4643      	mov	r3, r8
 8000e18:	6a1b      	ldr	r3, [r3, #32]
 8000e1a:	421f      	tst	r7, r3
 8000e1c:	d138      	bne.n	8000e90 <HAL_RCC_OscConfig+0x31c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e1e:	f7ff fd37 	bl	8000890 <HAL_GetTick>
 8000e22:	1b80      	subs	r0, r0, r6
 8000e24:	42a8      	cmp	r0, r5
 8000e26:	d9f6      	bls.n	8000e16 <HAL_RCC_OscConfig+0x2a2>
        {
          return HAL_TIMEOUT;
 8000e28:	2003      	movs	r0, #3
 8000e2a:	e14f      	b.n	80010cc <HAL_RCC_OscConfig+0x558>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e2c:	2b05      	cmp	r3, #5
 8000e2e:	d009      	beq.n	8000e44 <HAL_RCC_OscConfig+0x2d0>
 8000e30:	4b12      	ldr	r3, [pc, #72]	@ (8000e7c <HAL_RCC_OscConfig+0x308>)
 8000e32:	6a1a      	ldr	r2, [r3, #32]
 8000e34:	2101      	movs	r1, #1
 8000e36:	438a      	bics	r2, r1
 8000e38:	621a      	str	r2, [r3, #32]
 8000e3a:	6a1a      	ldr	r2, [r3, #32]
 8000e3c:	3103      	adds	r1, #3
 8000e3e:	438a      	bics	r2, r1
 8000e40:	621a      	str	r2, [r3, #32]
 8000e42:	e7de      	b.n	8000e02 <HAL_RCC_OscConfig+0x28e>
 8000e44:	4b0d      	ldr	r3, [pc, #52]	@ (8000e7c <HAL_RCC_OscConfig+0x308>)
 8000e46:	6a1a      	ldr	r2, [r3, #32]
 8000e48:	2104      	movs	r1, #4
 8000e4a:	430a      	orrs	r2, r1
 8000e4c:	621a      	str	r2, [r3, #32]
 8000e4e:	6a1a      	ldr	r2, [r3, #32]
 8000e50:	3903      	subs	r1, #3
 8000e52:	430a      	orrs	r2, r1
 8000e54:	621a      	str	r2, [r3, #32]
 8000e56:	e7d4      	b.n	8000e02 <HAL_RCC_OscConfig+0x28e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e58:	f7ff fd1a 	bl	8000890 <HAL_GetTick>
 8000e5c:	0006      	movs	r6, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e5e:	4b07      	ldr	r3, [pc, #28]	@ (8000e7c <HAL_RCC_OscConfig+0x308>)
 8000e60:	4698      	mov	r8, r3
 8000e62:	2702      	movs	r7, #2
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e64:	4d09      	ldr	r5, [pc, #36]	@ (8000e8c <HAL_RCC_OscConfig+0x318>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e66:	4643      	mov	r3, r8
 8000e68:	6a1b      	ldr	r3, [r3, #32]
 8000e6a:	421f      	tst	r7, r3
 8000e6c:	d010      	beq.n	8000e90 <HAL_RCC_OscConfig+0x31c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e6e:	f7ff fd0f 	bl	8000890 <HAL_GetTick>
 8000e72:	1b80      	subs	r0, r0, r6
 8000e74:	42a8      	cmp	r0, r5
 8000e76:	d9f6      	bls.n	8000e66 <HAL_RCC_OscConfig+0x2f2>
        {
          return HAL_TIMEOUT;
 8000e78:	2003      	movs	r0, #3
 8000e7a:	e127      	b.n	80010cc <HAL_RCC_OscConfig+0x558>
 8000e7c:	40021000 	.word	0x40021000
 8000e80:	fffeffff 	.word	0xfffeffff
 8000e84:	fffbffff 	.word	0xfffbffff
 8000e88:	40007000 	.word	0x40007000
 8000e8c:	00001388 	.word	0x00001388
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000e90:	464b      	mov	r3, r9
 8000e92:	2b01      	cmp	r3, #1
 8000e94:	d03c      	beq.n	8000f10 <HAL_RCC_OscConfig+0x39c>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000e96:	6823      	ldr	r3, [r4, #0]
 8000e98:	06db      	lsls	r3, r3, #27
 8000e9a:	d510      	bpl.n	8000ebe <HAL_RCC_OscConfig+0x34a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000e9c:	6963      	ldr	r3, [r4, #20]
 8000e9e:	2b01      	cmp	r3, #1
 8000ea0:	d03c      	beq.n	8000f1c <HAL_RCC_OscConfig+0x3a8>
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000ea2:	3305      	adds	r3, #5
 8000ea4:	d15b      	bne.n	8000f5e <HAL_RCC_OscConfig+0x3ea>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8000ea6:	4a8e      	ldr	r2, [pc, #568]	@ (80010e0 <HAL_RCC_OscConfig+0x56c>)
 8000ea8:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8000eaa:	2104      	movs	r1, #4
 8000eac:	438b      	bics	r3, r1
 8000eae:	6353      	str	r3, [r2, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000eb0:	6b51      	ldr	r1, [r2, #52]	@ 0x34
 8000eb2:	69a3      	ldr	r3, [r4, #24]
 8000eb4:	00db      	lsls	r3, r3, #3
 8000eb6:	20f8      	movs	r0, #248	@ 0xf8
 8000eb8:	4381      	bics	r1, r0
 8000eba:	430b      	orrs	r3, r1
 8000ebc:	6353      	str	r3, [r2, #52]	@ 0x34
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000ebe:	6823      	ldr	r3, [r4, #0]
 8000ec0:	069b      	lsls	r3, r3, #26
 8000ec2:	d574      	bpl.n	8000fae <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8000ec4:	4b86      	ldr	r3, [pc, #536]	@ (80010e0 <HAL_RCC_OscConfig+0x56c>)
 8000ec6:	685a      	ldr	r2, [r3, #4]
 8000ec8:	230c      	movs	r3, #12
 8000eca:	4013      	ands	r3, r2
 8000ecc:	2b0c      	cmp	r3, #12
 8000ece:	d065      	beq.n	8000f9c <HAL_RCC_OscConfig+0x428>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8000ed0:	4b83      	ldr	r3, [pc, #524]	@ (80010e0 <HAL_RCC_OscConfig+0x56c>)
 8000ed2:	685a      	ldr	r2, [r3, #4]
 8000ed4:	230c      	movs	r3, #12
 8000ed6:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8000ed8:	2b08      	cmp	r3, #8
 8000eda:	d058      	beq.n	8000f8e <HAL_RCC_OscConfig+0x41a>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8000edc:	6a23      	ldr	r3, [r4, #32]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d100      	bne.n	8000ee4 <HAL_RCC_OscConfig+0x370>
 8000ee2:	e086      	b.n	8000ff2 <HAL_RCC_OscConfig+0x47e>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8000ee4:	4a7e      	ldr	r2, [pc, #504]	@ (80010e0 <HAL_RCC_OscConfig+0x56c>)
 8000ee6:	6b51      	ldr	r1, [r2, #52]	@ 0x34
 8000ee8:	2380      	movs	r3, #128	@ 0x80
 8000eea:	025b      	lsls	r3, r3, #9
 8000eec:	430b      	orrs	r3, r1
 8000eee:	6353      	str	r3, [r2, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ef0:	f7ff fcce 	bl	8000890 <HAL_GetTick>
 8000ef4:	0005      	movs	r5, r0
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8000ef6:	4f7a      	ldr	r7, [pc, #488]	@ (80010e0 <HAL_RCC_OscConfig+0x56c>)
 8000ef8:	2680      	movs	r6, #128	@ 0x80
 8000efa:	02b6      	lsls	r6, r6, #10
 8000efc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000efe:	4233      	tst	r3, r6
 8000f00:	d155      	bne.n	8000fae <HAL_RCC_OscConfig+0x43a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000f02:	f7ff fcc5 	bl	8000890 <HAL_GetTick>
 8000f06:	1b40      	subs	r0, r0, r5
 8000f08:	2802      	cmp	r0, #2
 8000f0a:	d9f7      	bls.n	8000efc <HAL_RCC_OscConfig+0x388>
          {
            return HAL_TIMEOUT;
 8000f0c:	2003      	movs	r0, #3
 8000f0e:	e0dd      	b.n	80010cc <HAL_RCC_OscConfig+0x558>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f10:	4a73      	ldr	r2, [pc, #460]	@ (80010e0 <HAL_RCC_OscConfig+0x56c>)
 8000f12:	69d3      	ldr	r3, [r2, #28]
 8000f14:	4973      	ldr	r1, [pc, #460]	@ (80010e4 <HAL_RCC_OscConfig+0x570>)
 8000f16:	400b      	ands	r3, r1
 8000f18:	61d3      	str	r3, [r2, #28]
 8000f1a:	e7bc      	b.n	8000e96 <HAL_RCC_OscConfig+0x322>
      __HAL_RCC_HSI14ADC_DISABLE();
 8000f1c:	4b70      	ldr	r3, [pc, #448]	@ (80010e0 <HAL_RCC_OscConfig+0x56c>)
 8000f1e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000f20:	2104      	movs	r1, #4
 8000f22:	430a      	orrs	r2, r1
 8000f24:	635a      	str	r2, [r3, #52]	@ 0x34
      __HAL_RCC_HSI14_ENABLE();
 8000f26:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000f28:	3903      	subs	r1, #3
 8000f2a:	430a      	orrs	r2, r1
 8000f2c:	635a      	str	r2, [r3, #52]	@ 0x34
      tickstart = HAL_GetTick();
 8000f2e:	f7ff fcaf 	bl	8000890 <HAL_GetTick>
 8000f32:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000f34:	4f6a      	ldr	r7, [pc, #424]	@ (80010e0 <HAL_RCC_OscConfig+0x56c>)
 8000f36:	2602      	movs	r6, #2
 8000f38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f3a:	421e      	tst	r6, r3
 8000f3c:	d106      	bne.n	8000f4c <HAL_RCC_OscConfig+0x3d8>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000f3e:	f7ff fca7 	bl	8000890 <HAL_GetTick>
 8000f42:	1b40      	subs	r0, r0, r5
 8000f44:	2802      	cmp	r0, #2
 8000f46:	d9f7      	bls.n	8000f38 <HAL_RCC_OscConfig+0x3c4>
          return HAL_TIMEOUT;
 8000f48:	2003      	movs	r0, #3
 8000f4a:	e0bf      	b.n	80010cc <HAL_RCC_OscConfig+0x558>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000f4c:	4964      	ldr	r1, [pc, #400]	@ (80010e0 <HAL_RCC_OscConfig+0x56c>)
 8000f4e:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
 8000f50:	69a3      	ldr	r3, [r4, #24]
 8000f52:	00db      	lsls	r3, r3, #3
 8000f54:	20f8      	movs	r0, #248	@ 0xf8
 8000f56:	4382      	bics	r2, r0
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	634b      	str	r3, [r1, #52]	@ 0x34
 8000f5c:	e7af      	b.n	8000ebe <HAL_RCC_OscConfig+0x34a>
      __HAL_RCC_HSI14ADC_DISABLE();
 8000f5e:	4b60      	ldr	r3, [pc, #384]	@ (80010e0 <HAL_RCC_OscConfig+0x56c>)
 8000f60:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000f62:	2104      	movs	r1, #4
 8000f64:	430a      	orrs	r2, r1
 8000f66:	635a      	str	r2, [r3, #52]	@ 0x34
      __HAL_RCC_HSI14_DISABLE();
 8000f68:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000f6a:	3903      	subs	r1, #3
 8000f6c:	438a      	bics	r2, r1
 8000f6e:	635a      	str	r2, [r3, #52]	@ 0x34
      tickstart = HAL_GetTick();
 8000f70:	f7ff fc8e 	bl	8000890 <HAL_GetTick>
 8000f74:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000f76:	4f5a      	ldr	r7, [pc, #360]	@ (80010e0 <HAL_RCC_OscConfig+0x56c>)
 8000f78:	2602      	movs	r6, #2
 8000f7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f7c:	421e      	tst	r6, r3
 8000f7e:	d09e      	beq.n	8000ebe <HAL_RCC_OscConfig+0x34a>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000f80:	f7ff fc86 	bl	8000890 <HAL_GetTick>
 8000f84:	1b40      	subs	r0, r0, r5
 8000f86:	2802      	cmp	r0, #2
 8000f88:	d9f7      	bls.n	8000f7a <HAL_RCC_OscConfig+0x406>
          return HAL_TIMEOUT;
 8000f8a:	2003      	movs	r0, #3
 8000f8c:	e09e      	b.n	80010cc <HAL_RCC_OscConfig+0x558>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8000f8e:	4b54      	ldr	r3, [pc, #336]	@ (80010e0 <HAL_RCC_OscConfig+0x56c>)
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	22c0      	movs	r2, #192	@ 0xc0
 8000f94:	0252      	lsls	r2, r2, #9
 8000f96:	4013      	ands	r3, r2
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d19f      	bne.n	8000edc <HAL_RCC_OscConfig+0x368>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8000f9c:	4b50      	ldr	r3, [pc, #320]	@ (80010e0 <HAL_RCC_OscConfig+0x56c>)
 8000f9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000fa0:	039b      	lsls	r3, r3, #14
 8000fa2:	d504      	bpl.n	8000fae <HAL_RCC_OscConfig+0x43a>
 8000fa4:	6a23      	ldr	r3, [r4, #32]
        return HAL_ERROR;
 8000fa6:	2001      	movs	r0, #1
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	d000      	beq.n	8000fae <HAL_RCC_OscConfig+0x43a>
 8000fac:	e08e      	b.n	80010cc <HAL_RCC_OscConfig+0x558>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000fae:	6a63      	ldr	r3, [r4, #36]	@ 0x24
        }
      }
    }
  }

  return HAL_OK;
 8000fb0:	2000      	movs	r0, #0
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d100      	bne.n	8000fb8 <HAL_RCC_OscConfig+0x444>
 8000fb6:	e089      	b.n	80010cc <HAL_RCC_OscConfig+0x558>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000fb8:	4a49      	ldr	r2, [pc, #292]	@ (80010e0 <HAL_RCC_OscConfig+0x56c>)
 8000fba:	6851      	ldr	r1, [r2, #4]
 8000fbc:	220c      	movs	r2, #12
 8000fbe:	400a      	ands	r2, r1
 8000fc0:	2a08      	cmp	r2, #8
 8000fc2:	d068      	beq.n	8001096 <HAL_RCC_OscConfig+0x522>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000fc4:	2b02      	cmp	r3, #2
 8000fc6:	d029      	beq.n	800101c <HAL_RCC_OscConfig+0x4a8>
        __HAL_RCC_PLL_DISABLE();
 8000fc8:	4a45      	ldr	r2, [pc, #276]	@ (80010e0 <HAL_RCC_OscConfig+0x56c>)
 8000fca:	6813      	ldr	r3, [r2, #0]
 8000fcc:	4946      	ldr	r1, [pc, #280]	@ (80010e8 <HAL_RCC_OscConfig+0x574>)
 8000fce:	400b      	ands	r3, r1
 8000fd0:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8000fd2:	f7ff fc5d 	bl	8000890 <HAL_GetTick>
 8000fd6:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fd8:	4e41      	ldr	r6, [pc, #260]	@ (80010e0 <HAL_RCC_OscConfig+0x56c>)
 8000fda:	2580      	movs	r5, #128	@ 0x80
 8000fdc:	04ad      	lsls	r5, r5, #18
 8000fde:	6833      	ldr	r3, [r6, #0]
 8000fe0:	422b      	tst	r3, r5
 8000fe2:	d056      	beq.n	8001092 <HAL_RCC_OscConfig+0x51e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fe4:	f7ff fc54 	bl	8000890 <HAL_GetTick>
 8000fe8:	1b00      	subs	r0, r0, r4
 8000fea:	2802      	cmp	r0, #2
 8000fec:	d9f7      	bls.n	8000fde <HAL_RCC_OscConfig+0x46a>
            return HAL_TIMEOUT;
 8000fee:	2003      	movs	r0, #3
 8000ff0:	e06c      	b.n	80010cc <HAL_RCC_OscConfig+0x558>
        __HAL_RCC_HSI48_DISABLE();
 8000ff2:	4a3b      	ldr	r2, [pc, #236]	@ (80010e0 <HAL_RCC_OscConfig+0x56c>)
 8000ff4:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8000ff6:	493d      	ldr	r1, [pc, #244]	@ (80010ec <HAL_RCC_OscConfig+0x578>)
 8000ff8:	400b      	ands	r3, r1
 8000ffa:	6353      	str	r3, [r2, #52]	@ 0x34
        tickstart = HAL_GetTick();
 8000ffc:	f7ff fc48 	bl	8000890 <HAL_GetTick>
 8001000:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001002:	4f37      	ldr	r7, [pc, #220]	@ (80010e0 <HAL_RCC_OscConfig+0x56c>)
 8001004:	2680      	movs	r6, #128	@ 0x80
 8001006:	02b6      	lsls	r6, r6, #10
 8001008:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800100a:	4233      	tst	r3, r6
 800100c:	d0cf      	beq.n	8000fae <HAL_RCC_OscConfig+0x43a>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800100e:	f7ff fc3f 	bl	8000890 <HAL_GetTick>
 8001012:	1b40      	subs	r0, r0, r5
 8001014:	2802      	cmp	r0, #2
 8001016:	d9f7      	bls.n	8001008 <HAL_RCC_OscConfig+0x494>
            return HAL_TIMEOUT;
 8001018:	2003      	movs	r0, #3
 800101a:	e057      	b.n	80010cc <HAL_RCC_OscConfig+0x558>
        __HAL_RCC_PLL_DISABLE();
 800101c:	4a30      	ldr	r2, [pc, #192]	@ (80010e0 <HAL_RCC_OscConfig+0x56c>)
 800101e:	6813      	ldr	r3, [r2, #0]
 8001020:	4931      	ldr	r1, [pc, #196]	@ (80010e8 <HAL_RCC_OscConfig+0x574>)
 8001022:	400b      	ands	r3, r1
 8001024:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001026:	f7ff fc33 	bl	8000890 <HAL_GetTick>
 800102a:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800102c:	4f2c      	ldr	r7, [pc, #176]	@ (80010e0 <HAL_RCC_OscConfig+0x56c>)
 800102e:	2680      	movs	r6, #128	@ 0x80
 8001030:	04b6      	lsls	r6, r6, #18
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	4233      	tst	r3, r6
 8001036:	d006      	beq.n	8001046 <HAL_RCC_OscConfig+0x4d2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001038:	f7ff fc2a 	bl	8000890 <HAL_GetTick>
 800103c:	1b40      	subs	r0, r0, r5
 800103e:	2802      	cmp	r0, #2
 8001040:	d9f7      	bls.n	8001032 <HAL_RCC_OscConfig+0x4be>
            return HAL_TIMEOUT;
 8001042:	2003      	movs	r0, #3
 8001044:	e042      	b.n	80010cc <HAL_RCC_OscConfig+0x558>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001046:	4b26      	ldr	r3, [pc, #152]	@ (80010e0 <HAL_RCC_OscConfig+0x56c>)
 8001048:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800104a:	210f      	movs	r1, #15
 800104c:	438a      	bics	r2, r1
 800104e:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8001050:	430a      	orrs	r2, r1
 8001052:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001054:	6859      	ldr	r1, [r3, #4]
 8001056:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8001058:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800105a:	4302      	orrs	r2, r0
 800105c:	4824      	ldr	r0, [pc, #144]	@ (80010f0 <HAL_RCC_OscConfig+0x57c>)
 800105e:	4001      	ands	r1, r0
 8001060:	430a      	orrs	r2, r1
 8001062:	605a      	str	r2, [r3, #4]
        __HAL_RCC_PLL_ENABLE();
 8001064:	6819      	ldr	r1, [r3, #0]
 8001066:	2280      	movs	r2, #128	@ 0x80
 8001068:	0452      	lsls	r2, r2, #17
 800106a:	430a      	orrs	r2, r1
 800106c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800106e:	f7ff fc0f 	bl	8000890 <HAL_GetTick>
 8001072:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001074:	4e1a      	ldr	r6, [pc, #104]	@ (80010e0 <HAL_RCC_OscConfig+0x56c>)
 8001076:	2580      	movs	r5, #128	@ 0x80
 8001078:	04ad      	lsls	r5, r5, #18
 800107a:	6833      	ldr	r3, [r6, #0]
 800107c:	422b      	tst	r3, r5
 800107e:	d106      	bne.n	800108e <HAL_RCC_OscConfig+0x51a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001080:	f7ff fc06 	bl	8000890 <HAL_GetTick>
 8001084:	1b00      	subs	r0, r0, r4
 8001086:	2802      	cmp	r0, #2
 8001088:	d9f7      	bls.n	800107a <HAL_RCC_OscConfig+0x506>
            return HAL_TIMEOUT;
 800108a:	2003      	movs	r0, #3
 800108c:	e01e      	b.n	80010cc <HAL_RCC_OscConfig+0x558>
  return HAL_OK;
 800108e:	2000      	movs	r0, #0
 8001090:	e01c      	b.n	80010cc <HAL_RCC_OscConfig+0x558>
 8001092:	2000      	movs	r0, #0
 8001094:	e01a      	b.n	80010cc <HAL_RCC_OscConfig+0x558>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001096:	2b01      	cmp	r3, #1
 8001098:	d01f      	beq.n	80010da <HAL_RCC_OscConfig+0x566>
        pll_config  = RCC->CFGR;
 800109a:	4b11      	ldr	r3, [pc, #68]	@ (80010e0 <HAL_RCC_OscConfig+0x56c>)
 800109c:	685a      	ldr	r2, [r3, #4]
        pll_config2 = RCC->CFGR2;
 800109e:	6add      	ldr	r5, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80010a0:	23c0      	movs	r3, #192	@ 0xc0
 80010a2:	025b      	lsls	r3, r3, #9
 80010a4:	4013      	ands	r3, r2
 80010a6:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
          return HAL_ERROR;
 80010a8:	2001      	movs	r0, #1
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80010aa:	428b      	cmp	r3, r1
 80010ac:	d10e      	bne.n	80010cc <HAL_RCC_OscConfig+0x558>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80010ae:	230f      	movs	r3, #15
 80010b0:	402b      	ands	r3, r5
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80010b2:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80010b4:	428b      	cmp	r3, r1
 80010b6:	d109      	bne.n	80010cc <HAL_RCC_OscConfig+0x558>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80010b8:	23f0      	movs	r3, #240	@ 0xf0
 80010ba:	039b      	lsls	r3, r3, #14
 80010bc:	401a      	ands	r2, r3
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80010be:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80010c0:	1ad2      	subs	r2, r2, r3
 80010c2:	1e53      	subs	r3, r2, #1
 80010c4:	419a      	sbcs	r2, r3
 80010c6:	b2d0      	uxtb	r0, r2
 80010c8:	e000      	b.n	80010cc <HAL_RCC_OscConfig+0x558>
    return HAL_ERROR;
 80010ca:	2001      	movs	r0, #1
}
 80010cc:	b003      	add	sp, #12
 80010ce:	bcc0      	pop	{r6, r7}
 80010d0:	46b9      	mov	r9, r7
 80010d2:	46b0      	mov	r8, r6
 80010d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return HAL_ERROR;
 80010d6:	2001      	movs	r0, #1
 80010d8:	e7f8      	b.n	80010cc <HAL_RCC_OscConfig+0x558>
        return HAL_ERROR;
 80010da:	2001      	movs	r0, #1
 80010dc:	e7f6      	b.n	80010cc <HAL_RCC_OscConfig+0x558>
 80010de:	46c0      	nop			@ (mov r8, r8)
 80010e0:	40021000 	.word	0x40021000
 80010e4:	efffffff 	.word	0xefffffff
 80010e8:	feffffff 	.word	0xfeffffff
 80010ec:	fffeffff 	.word	0xfffeffff
 80010f0:	ffc27fff 	.word	0xffc27fff

080010f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80010f4:	b510      	push	{r4, lr}
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 80010f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001160 <HAL_RCC_GetSysClockFreq+0x6c>)
 80010f8:	685b      	ldr	r3, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80010fa:	200c      	movs	r0, #12
 80010fc:	4018      	ands	r0, r3
 80010fe:	2808      	cmp	r0, #8
 8001100:	d009      	beq.n	8001116 <HAL_RCC_GetSysClockFreq+0x22>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001102:	380c      	subs	r0, #12
 8001104:	4243      	negs	r3, r0
 8001106:	4158      	adcs	r0, r3
 8001108:	4240      	negs	r0, r0
 800110a:	4b16      	ldr	r3, [pc, #88]	@ (8001164 <HAL_RCC_GetSysClockFreq+0x70>)
 800110c:	4018      	ands	r0, r3
 800110e:	4b16      	ldr	r3, [pc, #88]	@ (8001168 <HAL_RCC_GetSysClockFreq+0x74>)
 8001110:	469c      	mov	ip, r3
 8001112:	4460      	add	r0, ip
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001114:	bd10      	pop	{r4, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001116:	4815      	ldr	r0, [pc, #84]	@ (800116c <HAL_RCC_GetSysClockFreq+0x78>)
 8001118:	0c99      	lsrs	r1, r3, #18
 800111a:	220f      	movs	r2, #15
 800111c:	4011      	ands	r1, r2
 800111e:	5c44      	ldrb	r4, [r0, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001120:	490f      	ldr	r1, [pc, #60]	@ (8001160 <HAL_RCC_GetSysClockFreq+0x6c>)
 8001122:	6ac8      	ldr	r0, [r1, #44]	@ 0x2c
 8001124:	4912      	ldr	r1, [pc, #72]	@ (8001170 <HAL_RCC_GetSysClockFreq+0x7c>)
 8001126:	4002      	ands	r2, r0
 8001128:	5c89      	ldrb	r1, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800112a:	22c0      	movs	r2, #192	@ 0xc0
 800112c:	0252      	lsls	r2, r2, #9
 800112e:	4013      	ands	r3, r2
 8001130:	2280      	movs	r2, #128	@ 0x80
 8001132:	0252      	lsls	r2, r2, #9
 8001134:	4293      	cmp	r3, r2
 8001136:	d008      	beq.n	800114a <HAL_RCC_GetSysClockFreq+0x56>
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001138:	22c0      	movs	r2, #192	@ 0xc0
 800113a:	0252      	lsls	r2, r2, #9
 800113c:	4293      	cmp	r3, r2
 800113e:	d009      	beq.n	8001154 <HAL_RCC_GetSysClockFreq+0x60>
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001140:	4809      	ldr	r0, [pc, #36]	@ (8001168 <HAL_RCC_GetSysClockFreq+0x74>)
 8001142:	f7fe ffe1 	bl	8000108 <__udivsi3>
 8001146:	4360      	muls	r0, r4
 8001148:	e7e4      	b.n	8001114 <HAL_RCC_GetSysClockFreq+0x20>
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800114a:	4807      	ldr	r0, [pc, #28]	@ (8001168 <HAL_RCC_GetSysClockFreq+0x74>)
 800114c:	f7fe ffdc 	bl	8000108 <__udivsi3>
 8001150:	4360      	muls	r0, r4
 8001152:	e7df      	b.n	8001114 <HAL_RCC_GetSysClockFreq+0x20>
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001154:	4807      	ldr	r0, [pc, #28]	@ (8001174 <HAL_RCC_GetSysClockFreq+0x80>)
 8001156:	f7fe ffd7 	bl	8000108 <__udivsi3>
 800115a:	4360      	muls	r0, r4
 800115c:	e7da      	b.n	8001114 <HAL_RCC_GetSysClockFreq+0x20>
 800115e:	46c0      	nop			@ (mov r8, r8)
 8001160:	40021000 	.word	0x40021000
 8001164:	02625a00 	.word	0x02625a00
 8001168:	007a1200 	.word	0x007a1200
 800116c:	08001f38 	.word	0x08001f38
 8001170:	08001f28 	.word	0x08001f28
 8001174:	02dc6c00 	.word	0x02dc6c00

08001178 <HAL_RCC_ClockConfig>:
{
 8001178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800117a:	46ce      	mov	lr, r9
 800117c:	4647      	mov	r7, r8
 800117e:	b580      	push	{r7, lr}
 8001180:	0004      	movs	r4, r0
 8001182:	000d      	movs	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001184:	2800      	cmp	r0, #0
 8001186:	d100      	bne.n	800118a <HAL_RCC_ClockConfig+0x12>
 8001188:	e08a      	b.n	80012a0 <HAL_RCC_ClockConfig+0x128>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800118a:	4b47      	ldr	r3, [pc, #284]	@ (80012a8 <HAL_RCC_ClockConfig+0x130>)
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	2301      	movs	r3, #1
 8001190:	4013      	ands	r3, r2
 8001192:	428b      	cmp	r3, r1
 8001194:	d20a      	bcs.n	80011ac <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001196:	4944      	ldr	r1, [pc, #272]	@ (80012a8 <HAL_RCC_ClockConfig+0x130>)
 8001198:	680b      	ldr	r3, [r1, #0]
 800119a:	2201      	movs	r2, #1
 800119c:	4393      	bics	r3, r2
 800119e:	432b      	orrs	r3, r5
 80011a0:	600b      	str	r3, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011a2:	680b      	ldr	r3, [r1, #0]
 80011a4:	401a      	ands	r2, r3
      return HAL_ERROR;
 80011a6:	2001      	movs	r0, #1
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011a8:	42aa      	cmp	r2, r5
 80011aa:	d175      	bne.n	8001298 <HAL_RCC_ClockConfig+0x120>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011ac:	6823      	ldr	r3, [r4, #0]
 80011ae:	079a      	lsls	r2, r3, #30
 80011b0:	d50e      	bpl.n	80011d0 <HAL_RCC_ClockConfig+0x58>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011b2:	075b      	lsls	r3, r3, #29
 80011b4:	d505      	bpl.n	80011c2 <HAL_RCC_ClockConfig+0x4a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80011b6:	4a3d      	ldr	r2, [pc, #244]	@ (80012ac <HAL_RCC_ClockConfig+0x134>)
 80011b8:	6851      	ldr	r1, [r2, #4]
 80011ba:	23e0      	movs	r3, #224	@ 0xe0
 80011bc:	00db      	lsls	r3, r3, #3
 80011be:	430b      	orrs	r3, r1
 80011c0:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011c2:	4a3a      	ldr	r2, [pc, #232]	@ (80012ac <HAL_RCC_ClockConfig+0x134>)
 80011c4:	6853      	ldr	r3, [r2, #4]
 80011c6:	21f0      	movs	r1, #240	@ 0xf0
 80011c8:	438b      	bics	r3, r1
 80011ca:	68a1      	ldr	r1, [r4, #8]
 80011cc:	430b      	orrs	r3, r1
 80011ce:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011d0:	6823      	ldr	r3, [r4, #0]
 80011d2:	07db      	lsls	r3, r3, #31
 80011d4:	d538      	bpl.n	8001248 <HAL_RCC_ClockConfig+0xd0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011d6:	6862      	ldr	r2, [r4, #4]
 80011d8:	2a01      	cmp	r2, #1
 80011da:	d009      	beq.n	80011f0 <HAL_RCC_ClockConfig+0x78>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80011dc:	2a02      	cmp	r2, #2
 80011de:	d027      	beq.n	8001230 <HAL_RCC_ClockConfig+0xb8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80011e0:	2a03      	cmp	r2, #3
 80011e2:	d02b      	beq.n	800123c <HAL_RCC_ClockConfig+0xc4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011e4:	4b31      	ldr	r3, [pc, #196]	@ (80012ac <HAL_RCC_ClockConfig+0x134>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	079b      	lsls	r3, r3, #30
 80011ea:	d405      	bmi.n	80011f8 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 80011ec:	2001      	movs	r0, #1
 80011ee:	e053      	b.n	8001298 <HAL_RCC_ClockConfig+0x120>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011f0:	4b2e      	ldr	r3, [pc, #184]	@ (80012ac <HAL_RCC_ClockConfig+0x134>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	039b      	lsls	r3, r3, #14
 80011f6:	d555      	bpl.n	80012a4 <HAL_RCC_ClockConfig+0x12c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011f8:	492c      	ldr	r1, [pc, #176]	@ (80012ac <HAL_RCC_ClockConfig+0x134>)
 80011fa:	684b      	ldr	r3, [r1, #4]
 80011fc:	2003      	movs	r0, #3
 80011fe:	4383      	bics	r3, r0
 8001200:	4313      	orrs	r3, r2
 8001202:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8001204:	f7ff fb44 	bl	8000890 <HAL_GetTick>
 8001208:	0006      	movs	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800120a:	4b28      	ldr	r3, [pc, #160]	@ (80012ac <HAL_RCC_ClockConfig+0x134>)
 800120c:	4698      	mov	r8, r3
 800120e:	270c      	movs	r7, #12
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001210:	4b27      	ldr	r3, [pc, #156]	@ (80012b0 <HAL_RCC_ClockConfig+0x138>)
 8001212:	4699      	mov	r9, r3
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001214:	4643      	mov	r3, r8
 8001216:	685a      	ldr	r2, [r3, #4]
 8001218:	403a      	ands	r2, r7
 800121a:	6863      	ldr	r3, [r4, #4]
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	429a      	cmp	r2, r3
 8001220:	d012      	beq.n	8001248 <HAL_RCC_ClockConfig+0xd0>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001222:	f7ff fb35 	bl	8000890 <HAL_GetTick>
 8001226:	1b80      	subs	r0, r0, r6
 8001228:	4548      	cmp	r0, r9
 800122a:	d9f3      	bls.n	8001214 <HAL_RCC_ClockConfig+0x9c>
        return HAL_TIMEOUT;
 800122c:	2003      	movs	r0, #3
 800122e:	e033      	b.n	8001298 <HAL_RCC_ClockConfig+0x120>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001230:	4b1e      	ldr	r3, [pc, #120]	@ (80012ac <HAL_RCC_ClockConfig+0x134>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	019b      	lsls	r3, r3, #6
 8001236:	d4df      	bmi.n	80011f8 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8001238:	2001      	movs	r0, #1
 800123a:	e02d      	b.n	8001298 <HAL_RCC_ClockConfig+0x120>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800123c:	4b1b      	ldr	r3, [pc, #108]	@ (80012ac <HAL_RCC_ClockConfig+0x134>)
 800123e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001240:	039b      	lsls	r3, r3, #14
 8001242:	d4d9      	bmi.n	80011f8 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8001244:	2001      	movs	r0, #1
 8001246:	e027      	b.n	8001298 <HAL_RCC_ClockConfig+0x120>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001248:	4b17      	ldr	r3, [pc, #92]	@ (80012a8 <HAL_RCC_ClockConfig+0x130>)
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	2301      	movs	r3, #1
 800124e:	4013      	ands	r3, r2
 8001250:	42ab      	cmp	r3, r5
 8001252:	d908      	bls.n	8001266 <HAL_RCC_ClockConfig+0xee>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001254:	4b14      	ldr	r3, [pc, #80]	@ (80012a8 <HAL_RCC_ClockConfig+0x130>)
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	2101      	movs	r1, #1
 800125a:	438a      	bics	r2, r1
 800125c:	601a      	str	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800125e:	681b      	ldr	r3, [r3, #0]
      return HAL_ERROR;
 8001260:	2001      	movs	r0, #1
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001262:	4219      	tst	r1, r3
 8001264:	d118      	bne.n	8001298 <HAL_RCC_ClockConfig+0x120>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001266:	6823      	ldr	r3, [r4, #0]
 8001268:	075b      	lsls	r3, r3, #29
 800126a:	d506      	bpl.n	800127a <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800126c:	4a0f      	ldr	r2, [pc, #60]	@ (80012ac <HAL_RCC_ClockConfig+0x134>)
 800126e:	6853      	ldr	r3, [r2, #4]
 8001270:	4910      	ldr	r1, [pc, #64]	@ (80012b4 <HAL_RCC_ClockConfig+0x13c>)
 8001272:	400b      	ands	r3, r1
 8001274:	68e1      	ldr	r1, [r4, #12]
 8001276:	430b      	orrs	r3, r1
 8001278:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800127a:	f7ff ff3b 	bl	80010f4 <HAL_RCC_GetSysClockFreq>
 800127e:	4b0b      	ldr	r3, [pc, #44]	@ (80012ac <HAL_RCC_ClockConfig+0x134>)
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	490d      	ldr	r1, [pc, #52]	@ (80012b8 <HAL_RCC_ClockConfig+0x140>)
 8001284:	4a0d      	ldr	r2, [pc, #52]	@ (80012bc <HAL_RCC_ClockConfig+0x144>)
 8001286:	061b      	lsls	r3, r3, #24
 8001288:	0f1b      	lsrs	r3, r3, #28
 800128a:	5cd3      	ldrb	r3, [r2, r3]
 800128c:	40d8      	lsrs	r0, r3
 800128e:	6008      	str	r0, [r1, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001290:	2000      	movs	r0, #0
 8001292:	f7ff fabb 	bl	800080c <HAL_InitTick>
  return HAL_OK;
 8001296:	2000      	movs	r0, #0
}
 8001298:	bcc0      	pop	{r6, r7}
 800129a:	46b9      	mov	r9, r7
 800129c:	46b0      	mov	r8, r6
 800129e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80012a0:	2001      	movs	r0, #1
 80012a2:	e7f9      	b.n	8001298 <HAL_RCC_ClockConfig+0x120>
        return HAL_ERROR;
 80012a4:	2001      	movs	r0, #1
 80012a6:	e7f7      	b.n	8001298 <HAL_RCC_ClockConfig+0x120>
 80012a8:	40022000 	.word	0x40022000
 80012ac:	40021000 	.word	0x40021000
 80012b0:	00001388 	.word	0x00001388
 80012b4:	fffff8ff 	.word	0xfffff8ff
 80012b8:	20000000 	.word	0x20000000
 80012bc:	08001f18 	.word	0x08001f18

080012c0 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80012c0:	4b04      	ldr	r3, [pc, #16]	@ (80012d4 <HAL_RCC_GetPCLK1Freq+0x14>)
 80012c2:	685b      	ldr	r3, [r3, #4]
  return SystemCoreClock;
 80012c4:	4a04      	ldr	r2, [pc, #16]	@ (80012d8 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80012c6:	4905      	ldr	r1, [pc, #20]	@ (80012dc <HAL_RCC_GetPCLK1Freq+0x1c>)
 80012c8:	055b      	lsls	r3, r3, #21
 80012ca:	0f5b      	lsrs	r3, r3, #29
 80012cc:	5ccb      	ldrb	r3, [r1, r3]
 80012ce:	6810      	ldr	r0, [r2, #0]
 80012d0:	40d8      	lsrs	r0, r3
}    
 80012d2:	4770      	bx	lr
 80012d4:	40021000 	.word	0x40021000
 80012d8:	20000000 	.word	0x20000000
 80012dc:	08001f10 	.word	0x08001f10

080012e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80012e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012e2:	46ce      	mov	lr, r9
 80012e4:	4647      	mov	r7, r8
 80012e6:	b580      	push	{r7, lr}
 80012e8:	b083      	sub	sp, #12
 80012ea:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80012ec:	6803      	ldr	r3, [r0, #0]
 80012ee:	03db      	lsls	r3, r3, #15
 80012f0:	d53a      	bpl.n	8001368 <HAL_RCCEx_PeriphCLKConfig+0x88>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012f2:	4b52      	ldr	r3, [pc, #328]	@ (800143c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80012f4:	69db      	ldr	r3, [r3, #28]
    FlagStatus       pwrclkchanged = RESET;
 80012f6:	2500      	movs	r5, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012f8:	00db      	lsls	r3, r3, #3
 80012fa:	d40a      	bmi.n	8001312 <HAL_RCCEx_PeriphCLKConfig+0x32>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80012fc:	4b4f      	ldr	r3, [pc, #316]	@ (800143c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80012fe:	69da      	ldr	r2, [r3, #28]
 8001300:	2180      	movs	r1, #128	@ 0x80
 8001302:	0549      	lsls	r1, r1, #21
 8001304:	430a      	orrs	r2, r1
 8001306:	61da      	str	r2, [r3, #28]
 8001308:	69db      	ldr	r3, [r3, #28]
 800130a:	400b      	ands	r3, r1
 800130c:	9301      	str	r3, [sp, #4]
 800130e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001310:	3501      	adds	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001312:	4b4b      	ldr	r3, [pc, #300]	@ (8001440 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	05db      	lsls	r3, r3, #23
 8001318:	d55e      	bpl.n	80013d8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800131a:	4b48      	ldr	r3, [pc, #288]	@ (800143c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800131c:	6a1a      	ldr	r2, [r3, #32]
 800131e:	23c0      	movs	r3, #192	@ 0xc0
 8001320:	009b      	lsls	r3, r3, #2
 8001322:	0011      	movs	r1, r2
 8001324:	4019      	ands	r1, r3
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001326:	421a      	tst	r2, r3
 8001328:	d015      	beq.n	8001356 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800132a:	6863      	ldr	r3, [r4, #4]
 800132c:	22c0      	movs	r2, #192	@ 0xc0
 800132e:	0092      	lsls	r2, r2, #2
 8001330:	4013      	ands	r3, r2
 8001332:	428b      	cmp	r3, r1
 8001334:	d00f      	beq.n	8001356 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001336:	4b41      	ldr	r3, [pc, #260]	@ (800143c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001338:	6a1a      	ldr	r2, [r3, #32]
 800133a:	4942      	ldr	r1, [pc, #264]	@ (8001444 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800133c:	4011      	ands	r1, r2
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800133e:	6a1e      	ldr	r6, [r3, #32]
 8001340:	2080      	movs	r0, #128	@ 0x80
 8001342:	0240      	lsls	r0, r0, #9
 8001344:	4330      	orrs	r0, r6
 8001346:	6218      	str	r0, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001348:	6a18      	ldr	r0, [r3, #32]
 800134a:	4e3f      	ldr	r6, [pc, #252]	@ (8001448 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800134c:	4030      	ands	r0, r6
 800134e:	6218      	str	r0, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001350:	6219      	str	r1, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001352:	07d2      	lsls	r2, r2, #31
 8001354:	d459      	bmi.n	800140a <HAL_RCCEx_PeriphCLKConfig+0x12a>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001356:	4a39      	ldr	r2, [pc, #228]	@ (800143c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001358:	6a13      	ldr	r3, [r2, #32]
 800135a:	493a      	ldr	r1, [pc, #232]	@ (8001444 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800135c:	400b      	ands	r3, r1
 800135e:	6861      	ldr	r1, [r4, #4]
 8001360:	430b      	orrs	r3, r1
 8001362:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001364:	2d01      	cmp	r5, #1
 8001366:	d063      	beq.n	8001430 <HAL_RCCEx_PeriphCLKConfig+0x150>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001368:	6823      	ldr	r3, [r4, #0]
 800136a:	07db      	lsls	r3, r3, #31
 800136c:	d506      	bpl.n	800137c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800136e:	4a33      	ldr	r2, [pc, #204]	@ (800143c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001370:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8001372:	2103      	movs	r1, #3
 8001374:	438b      	bics	r3, r1
 8001376:	68a1      	ldr	r1, [r4, #8]
 8001378:	430b      	orrs	r3, r1
 800137a:	6313      	str	r3, [r2, #48]	@ 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800137c:	6823      	ldr	r3, [r4, #0]
 800137e:	079b      	lsls	r3, r3, #30
 8001380:	d506      	bpl.n	8001390 <HAL_RCCEx_PeriphCLKConfig+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001382:	4a2e      	ldr	r2, [pc, #184]	@ (800143c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001384:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8001386:	4931      	ldr	r1, [pc, #196]	@ (800144c <HAL_RCCEx_PeriphCLKConfig+0x16c>)
 8001388:	400b      	ands	r3, r1
 800138a:	68e1      	ldr	r1, [r4, #12]
 800138c:	430b      	orrs	r3, r1
 800138e:	6313      	str	r3, [r2, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001390:	6823      	ldr	r3, [r4, #0]
 8001392:	069b      	lsls	r3, r3, #26
 8001394:	d506      	bpl.n	80013a4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001396:	4a29      	ldr	r2, [pc, #164]	@ (800143c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001398:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800139a:	2110      	movs	r1, #16
 800139c:	438b      	bics	r3, r1
 800139e:	6921      	ldr	r1, [r4, #16]
 80013a0:	430b      	orrs	r3, r1
 80013a2:	6313      	str	r3, [r2, #48]	@ 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80013a4:	6823      	ldr	r3, [r4, #0]
 80013a6:	039b      	lsls	r3, r3, #14
 80013a8:	d506      	bpl.n	80013b8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80013aa:	4a24      	ldr	r2, [pc, #144]	@ (800143c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80013ac:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 80013ae:	2180      	movs	r1, #128	@ 0x80
 80013b0:	438b      	bics	r3, r1
 80013b2:	69a1      	ldr	r1, [r4, #24]
 80013b4:	430b      	orrs	r3, r1
 80013b6:	6313      	str	r3, [r2, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80013b8:	6823      	ldr	r3, [r4, #0]
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80013ba:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80013bc:	055b      	lsls	r3, r3, #21
 80013be:	d506      	bpl.n	80013ce <HAL_RCCEx_PeriphCLKConfig+0xee>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80013c0:	4a1e      	ldr	r2, [pc, #120]	@ (800143c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80013c2:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 80013c4:	2140      	movs	r1, #64	@ 0x40
 80013c6:	438b      	bics	r3, r1
 80013c8:	6961      	ldr	r1, [r4, #20]
 80013ca:	430b      	orrs	r3, r1
 80013cc:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80013ce:	b003      	add	sp, #12
 80013d0:	bcc0      	pop	{r6, r7}
 80013d2:	46b9      	mov	r9, r7
 80013d4:	46b0      	mov	r8, r6
 80013d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013d8:	4a19      	ldr	r2, [pc, #100]	@ (8001440 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80013da:	6811      	ldr	r1, [r2, #0]
 80013dc:	2380      	movs	r3, #128	@ 0x80
 80013de:	005b      	lsls	r3, r3, #1
 80013e0:	430b      	orrs	r3, r1
 80013e2:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80013e4:	f7ff fa54 	bl	8000890 <HAL_GetTick>
 80013e8:	0006      	movs	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013ea:	4b15      	ldr	r3, [pc, #84]	@ (8001440 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80013ec:	4698      	mov	r8, r3
 80013ee:	2780      	movs	r7, #128	@ 0x80
 80013f0:	007f      	lsls	r7, r7, #1
 80013f2:	4643      	mov	r3, r8
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	423b      	tst	r3, r7
 80013f8:	d000      	beq.n	80013fc <HAL_RCCEx_PeriphCLKConfig+0x11c>
 80013fa:	e78e      	b.n	800131a <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013fc:	f7ff fa48 	bl	8000890 <HAL_GetTick>
 8001400:	1b80      	subs	r0, r0, r6
 8001402:	2864      	cmp	r0, #100	@ 0x64
 8001404:	d9f5      	bls.n	80013f2 <HAL_RCCEx_PeriphCLKConfig+0x112>
          return HAL_TIMEOUT;
 8001406:	2003      	movs	r0, #3
 8001408:	e7e1      	b.n	80013ce <HAL_RCCEx_PeriphCLKConfig+0xee>
        tickstart = HAL_GetTick();
 800140a:	f7ff fa41 	bl	8000890 <HAL_GetTick>
 800140e:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001410:	4b0a      	ldr	r3, [pc, #40]	@ (800143c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001412:	4698      	mov	r8, r3
 8001414:	2702      	movs	r7, #2
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001416:	4b0e      	ldr	r3, [pc, #56]	@ (8001450 <HAL_RCCEx_PeriphCLKConfig+0x170>)
 8001418:	4699      	mov	r9, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800141a:	4643      	mov	r3, r8
 800141c:	6a1b      	ldr	r3, [r3, #32]
 800141e:	421f      	tst	r7, r3
 8001420:	d199      	bne.n	8001356 <HAL_RCCEx_PeriphCLKConfig+0x76>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001422:	f7ff fa35 	bl	8000890 <HAL_GetTick>
 8001426:	1b80      	subs	r0, r0, r6
 8001428:	4548      	cmp	r0, r9
 800142a:	d9f6      	bls.n	800141a <HAL_RCCEx_PeriphCLKConfig+0x13a>
            return HAL_TIMEOUT;
 800142c:	2003      	movs	r0, #3
 800142e:	e7ce      	b.n	80013ce <HAL_RCCEx_PeriphCLKConfig+0xee>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001430:	69d3      	ldr	r3, [r2, #28]
 8001432:	4908      	ldr	r1, [pc, #32]	@ (8001454 <HAL_RCCEx_PeriphCLKConfig+0x174>)
 8001434:	400b      	ands	r3, r1
 8001436:	61d3      	str	r3, [r2, #28]
 8001438:	e796      	b.n	8001368 <HAL_RCCEx_PeriphCLKConfig+0x88>
 800143a:	46c0      	nop			@ (mov r8, r8)
 800143c:	40021000 	.word	0x40021000
 8001440:	40007000 	.word	0x40007000
 8001444:	fffffcff 	.word	0xfffffcff
 8001448:	fffeffff 	.word	0xfffeffff
 800144c:	fffcffff 	.word	0xfffcffff
 8001450:	00001388 	.word	0x00001388
 8001454:	efffffff 	.word	0xefffffff

08001458 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001458:	0003      	movs	r3, r0

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800145a:	223d      	movs	r2, #61	@ 0x3d
 800145c:	5c82      	ldrb	r2, [r0, r2]
  {
    return HAL_ERROR;
 800145e:	2001      	movs	r0, #1
  if (htim->State != HAL_TIM_STATE_READY)
 8001460:	2a01      	cmp	r2, #1
 8001462:	d120      	bne.n	80014a6 <HAL_TIM_Base_Start+0x4e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001464:	323c      	adds	r2, #60	@ 0x3c
 8001466:	2102      	movs	r1, #2
 8001468:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a0f      	ldr	r2, [pc, #60]	@ (80014ac <HAL_TIM_Base_Start+0x54>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d00f      	beq.n	8001492 <HAL_TIM_Base_Start+0x3a>
 8001472:	2280      	movs	r2, #128	@ 0x80
 8001474:	05d2      	lsls	r2, r2, #23
 8001476:	4293      	cmp	r3, r2
 8001478:	d00b      	beq.n	8001492 <HAL_TIM_Base_Start+0x3a>
 800147a:	4a0d      	ldr	r2, [pc, #52]	@ (80014b0 <HAL_TIM_Base_Start+0x58>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d008      	beq.n	8001492 <HAL_TIM_Base_Start+0x3a>
 8001480:	4a0c      	ldr	r2, [pc, #48]	@ (80014b4 <HAL_TIM_Base_Start+0x5c>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d005      	beq.n	8001492 <HAL_TIM_Base_Start+0x3a>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	2101      	movs	r1, #1
 800148a:	430a      	orrs	r2, r1
 800148c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800148e:	2000      	movs	r0, #0
 8001490:	e009      	b.n	80014a6 <HAL_TIM_Base_Start+0x4e>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001492:	6899      	ldr	r1, [r3, #8]
 8001494:	2207      	movs	r2, #7
 8001496:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001498:	2a06      	cmp	r2, #6
 800149a:	d005      	beq.n	80014a8 <HAL_TIM_Base_Start+0x50>
      __HAL_TIM_ENABLE(htim);
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	2101      	movs	r1, #1
 80014a0:	430a      	orrs	r2, r1
 80014a2:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80014a4:	2000      	movs	r0, #0
}
 80014a6:	4770      	bx	lr
  return HAL_OK;
 80014a8:	2000      	movs	r0, #0
 80014aa:	e7fc      	b.n	80014a6 <HAL_TIM_Base_Start+0x4e>
 80014ac:	40012c00 	.word	0x40012c00
 80014b0:	40000400 	.word	0x40000400
 80014b4:	40014000 	.word	0x40014000

080014b8 <HAL_TIM_PeriodElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80014b8:	4770      	bx	lr

080014ba <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80014ba:	4770      	bx	lr

080014bc <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80014bc:	4770      	bx	lr

080014be <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80014be:	4770      	bx	lr

080014c0 <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80014c0:	4770      	bx	lr

080014c2 <HAL_TIM_IRQHandler>:
{
 80014c2:	b570      	push	{r4, r5, r6, lr}
 80014c4:	0004      	movs	r4, r0
  uint32_t itsource = htim->Instance->DIER;
 80014c6:	6803      	ldr	r3, [r0, #0]
 80014c8:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 80014ca:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80014cc:	07aa      	lsls	r2, r5, #30
 80014ce:	d50e      	bpl.n	80014ee <HAL_TIM_IRQHandler+0x2c>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80014d0:	07b2      	lsls	r2, r6, #30
 80014d2:	d50c      	bpl.n	80014ee <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80014d4:	2203      	movs	r2, #3
 80014d6:	4252      	negs	r2, r2
 80014d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80014da:	2301      	movs	r3, #1
 80014dc:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80014de:	6803      	ldr	r3, [r0, #0]
 80014e0:	699b      	ldr	r3, [r3, #24]
 80014e2:	079b      	lsls	r3, r3, #30
 80014e4:	d051      	beq.n	800158a <HAL_TIM_IRQHandler+0xc8>
          HAL_TIM_IC_CaptureCallback(htim);
 80014e6:	f7ff ffe9 	bl	80014bc <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80014ea:	2300      	movs	r3, #0
 80014ec:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80014ee:	076b      	lsls	r3, r5, #29
 80014f0:	d512      	bpl.n	8001518 <HAL_TIM_IRQHandler+0x56>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80014f2:	0773      	lsls	r3, r6, #29
 80014f4:	d510      	bpl.n	8001518 <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80014f6:	6823      	ldr	r3, [r4, #0]
 80014f8:	2205      	movs	r2, #5
 80014fa:	4252      	negs	r2, r2
 80014fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80014fe:	2302      	movs	r3, #2
 8001500:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001502:	6823      	ldr	r3, [r4, #0]
 8001504:	699a      	ldr	r2, [r3, #24]
 8001506:	23c0      	movs	r3, #192	@ 0xc0
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	421a      	tst	r2, r3
 800150c:	d043      	beq.n	8001596 <HAL_TIM_IRQHandler+0xd4>
        HAL_TIM_IC_CaptureCallback(htim);
 800150e:	0020      	movs	r0, r4
 8001510:	f7ff ffd4 	bl	80014bc <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001514:	2300      	movs	r3, #0
 8001516:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001518:	072b      	lsls	r3, r5, #28
 800151a:	d510      	bpl.n	800153e <HAL_TIM_IRQHandler+0x7c>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800151c:	0733      	lsls	r3, r6, #28
 800151e:	d50e      	bpl.n	800153e <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001520:	6823      	ldr	r3, [r4, #0]
 8001522:	2209      	movs	r2, #9
 8001524:	4252      	negs	r2, r2
 8001526:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001528:	2304      	movs	r3, #4
 800152a:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800152c:	6823      	ldr	r3, [r4, #0]
 800152e:	69db      	ldr	r3, [r3, #28]
 8001530:	079b      	lsls	r3, r3, #30
 8001532:	d037      	beq.n	80015a4 <HAL_TIM_IRQHandler+0xe2>
        HAL_TIM_IC_CaptureCallback(htim);
 8001534:	0020      	movs	r0, r4
 8001536:	f7ff ffc1 	bl	80014bc <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800153a:	2300      	movs	r3, #0
 800153c:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800153e:	06eb      	lsls	r3, r5, #27
 8001540:	d512      	bpl.n	8001568 <HAL_TIM_IRQHandler+0xa6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001542:	06f3      	lsls	r3, r6, #27
 8001544:	d510      	bpl.n	8001568 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001546:	6823      	ldr	r3, [r4, #0]
 8001548:	2211      	movs	r2, #17
 800154a:	4252      	negs	r2, r2
 800154c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800154e:	2308      	movs	r3, #8
 8001550:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001552:	6823      	ldr	r3, [r4, #0]
 8001554:	69da      	ldr	r2, [r3, #28]
 8001556:	23c0      	movs	r3, #192	@ 0xc0
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	421a      	tst	r2, r3
 800155c:	d029      	beq.n	80015b2 <HAL_TIM_IRQHandler+0xf0>
        HAL_TIM_IC_CaptureCallback(htim);
 800155e:	0020      	movs	r0, r4
 8001560:	f7ff ffac 	bl	80014bc <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001564:	2300      	movs	r3, #0
 8001566:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001568:	07eb      	lsls	r3, r5, #31
 800156a:	d501      	bpl.n	8001570 <HAL_TIM_IRQHandler+0xae>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800156c:	07f3      	lsls	r3, r6, #31
 800156e:	d427      	bmi.n	80015c0 <HAL_TIM_IRQHandler+0xfe>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001570:	062b      	lsls	r3, r5, #24
 8001572:	d501      	bpl.n	8001578 <HAL_TIM_IRQHandler+0xb6>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001574:	0633      	lsls	r3, r6, #24
 8001576:	d42b      	bmi.n	80015d0 <HAL_TIM_IRQHandler+0x10e>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001578:	066b      	lsls	r3, r5, #25
 800157a:	d501      	bpl.n	8001580 <HAL_TIM_IRQHandler+0xbe>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800157c:	0673      	lsls	r3, r6, #25
 800157e:	d42f      	bmi.n	80015e0 <HAL_TIM_IRQHandler+0x11e>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001580:	06ad      	lsls	r5, r5, #26
 8001582:	d501      	bpl.n	8001588 <HAL_TIM_IRQHandler+0xc6>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001584:	06b6      	lsls	r6, r6, #26
 8001586:	d433      	bmi.n	80015f0 <HAL_TIM_IRQHandler+0x12e>
}
 8001588:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800158a:	f7ff ff96 	bl	80014ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800158e:	0020      	movs	r0, r4
 8001590:	f7ff ff95 	bl	80014be <HAL_TIM_PWM_PulseFinishedCallback>
 8001594:	e7a9      	b.n	80014ea <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001596:	0020      	movs	r0, r4
 8001598:	f7ff ff8f 	bl	80014ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800159c:	0020      	movs	r0, r4
 800159e:	f7ff ff8e 	bl	80014be <HAL_TIM_PWM_PulseFinishedCallback>
 80015a2:	e7b7      	b.n	8001514 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80015a4:	0020      	movs	r0, r4
 80015a6:	f7ff ff88 	bl	80014ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015aa:	0020      	movs	r0, r4
 80015ac:	f7ff ff87 	bl	80014be <HAL_TIM_PWM_PulseFinishedCallback>
 80015b0:	e7c3      	b.n	800153a <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80015b2:	0020      	movs	r0, r4
 80015b4:	f7ff ff81 	bl	80014ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015b8:	0020      	movs	r0, r4
 80015ba:	f7ff ff80 	bl	80014be <HAL_TIM_PWM_PulseFinishedCallback>
 80015be:	e7d1      	b.n	8001564 <HAL_TIM_IRQHandler+0xa2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80015c0:	6823      	ldr	r3, [r4, #0]
 80015c2:	2202      	movs	r2, #2
 80015c4:	4252      	negs	r2, r2
 80015c6:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80015c8:	0020      	movs	r0, r4
 80015ca:	f7ff ff75 	bl	80014b8 <HAL_TIM_PeriodElapsedCallback>
 80015ce:	e7cf      	b.n	8001570 <HAL_TIM_IRQHandler+0xae>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80015d0:	6823      	ldr	r3, [r4, #0]
 80015d2:	2281      	movs	r2, #129	@ 0x81
 80015d4:	4252      	negs	r2, r2
 80015d6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80015d8:	0020      	movs	r0, r4
 80015da:	f000 f9ec 	bl	80019b6 <HAL_TIMEx_BreakCallback>
 80015de:	e7cb      	b.n	8001578 <HAL_TIM_IRQHandler+0xb6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80015e0:	6823      	ldr	r3, [r4, #0]
 80015e2:	2241      	movs	r2, #65	@ 0x41
 80015e4:	4252      	negs	r2, r2
 80015e6:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80015e8:	0020      	movs	r0, r4
 80015ea:	f7ff ff69 	bl	80014c0 <HAL_TIM_TriggerCallback>
 80015ee:	e7c7      	b.n	8001580 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80015f0:	6823      	ldr	r3, [r4, #0]
 80015f2:	2221      	movs	r2, #33	@ 0x21
 80015f4:	4252      	negs	r2, r2
 80015f6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80015f8:	0020      	movs	r0, r4
 80015fa:	f000 f9db 	bl	80019b4 <HAL_TIMEx_CommutCallback>
}
 80015fe:	e7c3      	b.n	8001588 <HAL_TIM_IRQHandler+0xc6>

08001600 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001600:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001602:	4a50      	ldr	r2, [pc, #320]	@ (8001744 <TIM_Base_SetConfig+0x144>)
 8001604:	4290      	cmp	r0, r2
 8001606:	d06d      	beq.n	80016e4 <TIM_Base_SetConfig+0xe4>
 8001608:	2280      	movs	r2, #128	@ 0x80
 800160a:	05d2      	lsls	r2, r2, #23
 800160c:	4290      	cmp	r0, r2
 800160e:	d100      	bne.n	8001612 <TIM_Base_SetConfig+0x12>
 8001610:	e085      	b.n	800171e <TIM_Base_SetConfig+0x11e>
 8001612:	4a4d      	ldr	r2, [pc, #308]	@ (8001748 <TIM_Base_SetConfig+0x148>)
 8001614:	4290      	cmp	r0, r2
 8001616:	d016      	beq.n	8001646 <TIM_Base_SetConfig+0x46>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001618:	4a4c      	ldr	r2, [pc, #304]	@ (800174c <TIM_Base_SetConfig+0x14c>)
 800161a:	4290      	cmp	r0, r2
 800161c:	d100      	bne.n	8001620 <TIM_Base_SetConfig+0x20>
 800161e:	e082      	b.n	8001726 <TIM_Base_SetConfig+0x126>
 8001620:	4a4b      	ldr	r2, [pc, #300]	@ (8001750 <TIM_Base_SetConfig+0x150>)
 8001622:	4290      	cmp	r0, r2
 8001624:	d042      	beq.n	80016ac <TIM_Base_SetConfig+0xac>
 8001626:	4a4b      	ldr	r2, [pc, #300]	@ (8001754 <TIM_Base_SetConfig+0x154>)
 8001628:	4290      	cmp	r0, r2
 800162a:	d04d      	beq.n	80016c8 <TIM_Base_SetConfig+0xc8>
 800162c:	4a4a      	ldr	r2, [pc, #296]	@ (8001758 <TIM_Base_SetConfig+0x158>)
 800162e:	4290      	cmp	r0, r2
 8001630:	d02e      	beq.n	8001690 <TIM_Base_SetConfig+0x90>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001632:	2280      	movs	r2, #128	@ 0x80
 8001634:	4393      	bics	r3, r2
 8001636:	694a      	ldr	r2, [r1, #20]
 8001638:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800163a:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800163c:	688b      	ldr	r3, [r1, #8]
 800163e:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001640:	680b      	ldr	r3, [r1, #0]
 8001642:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001644:	e061      	b.n	800170a <TIM_Base_SetConfig+0x10a>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001646:	2270      	movs	r2, #112	@ 0x70
 8001648:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 800164a:	684a      	ldr	r2, [r1, #4]
 800164c:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800164e:	4a3d      	ldr	r2, [pc, #244]	@ (8001744 <TIM_Base_SetConfig+0x144>)
 8001650:	4290      	cmp	r0, r2
 8001652:	d04b      	beq.n	80016ec <TIM_Base_SetConfig+0xec>
 8001654:	2280      	movs	r2, #128	@ 0x80
 8001656:	05d2      	lsls	r2, r2, #23
 8001658:	4290      	cmp	r0, r2
 800165a:	d064      	beq.n	8001726 <TIM_Base_SetConfig+0x126>
    tmpcr1 &= ~TIM_CR1_CKD;
 800165c:	4a3f      	ldr	r2, [pc, #252]	@ (800175c <TIM_Base_SetConfig+0x15c>)
 800165e:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001660:	68ca      	ldr	r2, [r1, #12]
 8001662:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001664:	2280      	movs	r2, #128	@ 0x80
 8001666:	4393      	bics	r3, r2
 8001668:	694a      	ldr	r2, [r1, #20]
 800166a:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800166c:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800166e:	688b      	ldr	r3, [r1, #8]
 8001670:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001672:	680b      	ldr	r3, [r1, #0]
 8001674:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001676:	4b33      	ldr	r3, [pc, #204]	@ (8001744 <TIM_Base_SetConfig+0x144>)
 8001678:	4298      	cmp	r0, r3
 800167a:	d044      	beq.n	8001706 <TIM_Base_SetConfig+0x106>
 800167c:	4b34      	ldr	r3, [pc, #208]	@ (8001750 <TIM_Base_SetConfig+0x150>)
 800167e:	4298      	cmp	r0, r3
 8001680:	d041      	beq.n	8001706 <TIM_Base_SetConfig+0x106>
 8001682:	4b34      	ldr	r3, [pc, #208]	@ (8001754 <TIM_Base_SetConfig+0x154>)
 8001684:	4298      	cmp	r0, r3
 8001686:	d03e      	beq.n	8001706 <TIM_Base_SetConfig+0x106>
 8001688:	4b33      	ldr	r3, [pc, #204]	@ (8001758 <TIM_Base_SetConfig+0x158>)
 800168a:	4298      	cmp	r0, r3
 800168c:	d03b      	beq.n	8001706 <TIM_Base_SetConfig+0x106>
 800168e:	e03c      	b.n	800170a <TIM_Base_SetConfig+0x10a>
    tmpcr1 &= ~TIM_CR1_CKD;
 8001690:	4a32      	ldr	r2, [pc, #200]	@ (800175c <TIM_Base_SetConfig+0x15c>)
 8001692:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001694:	68ca      	ldr	r2, [r1, #12]
 8001696:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001698:	2280      	movs	r2, #128	@ 0x80
 800169a:	4393      	bics	r3, r2
 800169c:	694a      	ldr	r2, [r1, #20]
 800169e:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80016a0:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80016a2:	688b      	ldr	r3, [r1, #8]
 80016a4:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80016a6:	680b      	ldr	r3, [r1, #0]
 80016a8:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80016aa:	e02c      	b.n	8001706 <TIM_Base_SetConfig+0x106>
    tmpcr1 &= ~TIM_CR1_CKD;
 80016ac:	4a2b      	ldr	r2, [pc, #172]	@ (800175c <TIM_Base_SetConfig+0x15c>)
 80016ae:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80016b0:	68ca      	ldr	r2, [r1, #12]
 80016b2:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80016b4:	2280      	movs	r2, #128	@ 0x80
 80016b6:	4393      	bics	r3, r2
 80016b8:	694a      	ldr	r2, [r1, #20]
 80016ba:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80016bc:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80016be:	688b      	ldr	r3, [r1, #8]
 80016c0:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80016c2:	680b      	ldr	r3, [r1, #0]
 80016c4:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80016c6:	e01e      	b.n	8001706 <TIM_Base_SetConfig+0x106>
    tmpcr1 &= ~TIM_CR1_CKD;
 80016c8:	4a24      	ldr	r2, [pc, #144]	@ (800175c <TIM_Base_SetConfig+0x15c>)
 80016ca:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80016cc:	68ca      	ldr	r2, [r1, #12]
 80016ce:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80016d0:	2280      	movs	r2, #128	@ 0x80
 80016d2:	4393      	bics	r3, r2
 80016d4:	694a      	ldr	r2, [r1, #20]
 80016d6:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80016d8:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80016da:	688b      	ldr	r3, [r1, #8]
 80016dc:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80016de:	680b      	ldr	r3, [r1, #0]
 80016e0:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80016e2:	e010      	b.n	8001706 <TIM_Base_SetConfig+0x106>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80016e4:	2270      	movs	r2, #112	@ 0x70
 80016e6:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 80016e8:	684a      	ldr	r2, [r1, #4]
 80016ea:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 80016ec:	4a1b      	ldr	r2, [pc, #108]	@ (800175c <TIM_Base_SetConfig+0x15c>)
 80016ee:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80016f0:	68ca      	ldr	r2, [r1, #12]
 80016f2:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80016f4:	2280      	movs	r2, #128	@ 0x80
 80016f6:	4393      	bics	r3, r2
 80016f8:	694a      	ldr	r2, [r1, #20]
 80016fa:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80016fc:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80016fe:	688b      	ldr	r3, [r1, #8]
 8001700:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001702:	680b      	ldr	r3, [r1, #0]
 8001704:	6283      	str	r3, [r0, #40]	@ 0x28
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001706:	690b      	ldr	r3, [r1, #16]
 8001708:	6303      	str	r3, [r0, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800170a:	2301      	movs	r3, #1
 800170c:	6143      	str	r3, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800170e:	6902      	ldr	r2, [r0, #16]
 8001710:	4213      	tst	r3, r2
 8001712:	d003      	beq.n	800171c <TIM_Base_SetConfig+0x11c>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001714:	6903      	ldr	r3, [r0, #16]
 8001716:	2201      	movs	r2, #1
 8001718:	4393      	bics	r3, r2
 800171a:	6103      	str	r3, [r0, #16]
  }
}
 800171c:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800171e:	2270      	movs	r2, #112	@ 0x70
 8001720:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8001722:	684a      	ldr	r2, [r1, #4]
 8001724:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8001726:	4a0d      	ldr	r2, [pc, #52]	@ (800175c <TIM_Base_SetConfig+0x15c>)
 8001728:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800172a:	68ca      	ldr	r2, [r1, #12]
 800172c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800172e:	2280      	movs	r2, #128	@ 0x80
 8001730:	4393      	bics	r3, r2
 8001732:	694a      	ldr	r2, [r1, #20]
 8001734:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8001736:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001738:	688b      	ldr	r3, [r1, #8]
 800173a:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800173c:	680b      	ldr	r3, [r1, #0]
 800173e:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001740:	e7e3      	b.n	800170a <TIM_Base_SetConfig+0x10a>
 8001742:	46c0      	nop			@ (mov r8, r8)
 8001744:	40012c00 	.word	0x40012c00
 8001748:	40000400 	.word	0x40000400
 800174c:	40002000 	.word	0x40002000
 8001750:	40014000 	.word	0x40014000
 8001754:	40014400 	.word	0x40014400
 8001758:	40014800 	.word	0x40014800
 800175c:	fffffcff 	.word	0xfffffcff

08001760 <HAL_TIM_Base_Init>:
{
 8001760:	b570      	push	{r4, r5, r6, lr}
 8001762:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 8001764:	d026      	beq.n	80017b4 <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001766:	233d      	movs	r3, #61	@ 0x3d
 8001768:	5cc3      	ldrb	r3, [r0, r3]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d01c      	beq.n	80017a8 <HAL_TIM_Base_Init+0x48>
  htim->State = HAL_TIM_STATE_BUSY;
 800176e:	253d      	movs	r5, #61	@ 0x3d
 8001770:	2302      	movs	r3, #2
 8001772:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001774:	0021      	movs	r1, r4
 8001776:	c901      	ldmia	r1!, {r0}
 8001778:	f7ff ff42 	bl	8001600 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800177c:	2301      	movs	r3, #1
 800177e:	2246      	movs	r2, #70	@ 0x46
 8001780:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001782:	3a08      	subs	r2, #8
 8001784:	54a3      	strb	r3, [r4, r2]
 8001786:	3201      	adds	r2, #1
 8001788:	54a3      	strb	r3, [r4, r2]
 800178a:	3201      	adds	r2, #1
 800178c:	54a3      	strb	r3, [r4, r2]
 800178e:	3201      	adds	r2, #1
 8001790:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001792:	3201      	adds	r2, #1
 8001794:	54a3      	strb	r3, [r4, r2]
 8001796:	3201      	adds	r2, #1
 8001798:	54a3      	strb	r3, [r4, r2]
 800179a:	3201      	adds	r2, #1
 800179c:	54a3      	strb	r3, [r4, r2]
 800179e:	3201      	adds	r2, #1
 80017a0:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 80017a2:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 80017a4:	2000      	movs	r0, #0
}
 80017a6:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 80017a8:	333c      	adds	r3, #60	@ 0x3c
 80017aa:	2200      	movs	r2, #0
 80017ac:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 80017ae:	f7fe ffa3 	bl	80006f8 <HAL_TIM_Base_MspInit>
 80017b2:	e7dc      	b.n	800176e <HAL_TIM_Base_Init+0xe>
    return HAL_ERROR;
 80017b4:	2001      	movs	r0, #1
 80017b6:	e7f6      	b.n	80017a6 <HAL_TIM_Base_Init+0x46>

080017b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80017b8:	b530      	push	{r4, r5, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80017ba:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80017bc:	4d03      	ldr	r5, [pc, #12]	@ (80017cc <TIM_ETR_SetConfig+0x14>)
 80017be:	402c      	ands	r4, r5

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80017c0:	021b      	lsls	r3, r3, #8
 80017c2:	430a      	orrs	r2, r1
 80017c4:	4313      	orrs	r3, r2
 80017c6:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80017c8:	6083      	str	r3, [r0, #8]
}
 80017ca:	bd30      	pop	{r4, r5, pc}
 80017cc:	ffff00ff 	.word	0xffff00ff

080017d0 <HAL_TIM_ConfigClockSource>:
{
 80017d0:	b570      	push	{r4, r5, r6, lr}
 80017d2:	0004      	movs	r4, r0
  __HAL_LOCK(htim);
 80017d4:	233c      	movs	r3, #60	@ 0x3c
 80017d6:	5cc3      	ldrb	r3, [r0, r3]
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d100      	bne.n	80017de <HAL_TIM_ConfigClockSource+0xe>
 80017dc:	e0ad      	b.n	800193a <HAL_TIM_ConfigClockSource+0x16a>
 80017de:	233c      	movs	r3, #60	@ 0x3c
 80017e0:	2201      	movs	r2, #1
 80017e2:	54c2      	strb	r2, [r0, r3]
  htim->State = HAL_TIM_STATE_BUSY;
 80017e4:	3301      	adds	r3, #1
 80017e6:	3201      	adds	r2, #1
 80017e8:	54c2      	strb	r2, [r0, r3]
  tmpsmcr = htim->Instance->SMCR;
 80017ea:	6802      	ldr	r2, [r0, #0]
 80017ec:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80017ee:	4854      	ldr	r0, [pc, #336]	@ (8001940 <HAL_TIM_ConfigClockSource+0x170>)
 80017f0:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 80017f2:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 80017f4:	680b      	ldr	r3, [r1, #0]
 80017f6:	2b60      	cmp	r3, #96	@ 0x60
 80017f8:	d064      	beq.n	80018c4 <HAL_TIM_ConfigClockSource+0xf4>
 80017fa:	d838      	bhi.n	800186e <HAL_TIM_ConfigClockSource+0x9e>
 80017fc:	2b40      	cmp	r3, #64	@ 0x40
 80017fe:	d100      	bne.n	8001802 <HAL_TIM_ConfigClockSource+0x32>
 8001800:	e07c      	b.n	80018fc <HAL_TIM_ConfigClockSource+0x12c>
 8001802:	d816      	bhi.n	8001832 <HAL_TIM_ConfigClockSource+0x62>
 8001804:	2b20      	cmp	r3, #32
 8001806:	d006      	beq.n	8001816 <HAL_TIM_ConfigClockSource+0x46>
 8001808:	d80f      	bhi.n	800182a <HAL_TIM_ConfigClockSource+0x5a>
 800180a:	2210      	movs	r2, #16
 800180c:	0019      	movs	r1, r3
 800180e:	4391      	bics	r1, r2
 8001810:	2001      	movs	r0, #1
 8001812:	2900      	cmp	r1, #0
 8001814:	d141      	bne.n	800189a <HAL_TIM_ConfigClockSource+0xca>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001816:	6821      	ldr	r1, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8001818:	688a      	ldr	r2, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800181a:	2070      	movs	r0, #112	@ 0x70
 800181c:	4382      	bics	r2, r0
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800181e:	4313      	orrs	r3, r2
 8001820:	2207      	movs	r2, #7
 8001822:	4313      	orrs	r3, r2
  TIMx->SMCR = tmpsmcr;
 8001824:	608b      	str	r3, [r1, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8001826:	2000      	movs	r0, #0
}
 8001828:	e037      	b.n	800189a <HAL_TIM_ConfigClockSource+0xca>
  switch (sClockSourceConfig->ClockSource)
 800182a:	2001      	movs	r0, #1
 800182c:	2b30      	cmp	r3, #48	@ 0x30
 800182e:	d0f2      	beq.n	8001816 <HAL_TIM_ConfigClockSource+0x46>
 8001830:	e033      	b.n	800189a <HAL_TIM_ConfigClockSource+0xca>
 8001832:	2001      	movs	r0, #1
 8001834:	2b50      	cmp	r3, #80	@ 0x50
 8001836:	d130      	bne.n	800189a <HAL_TIM_ConfigClockSource+0xca>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001838:	6823      	ldr	r3, [r4, #0]
                               sClockSourceConfig->ClockPolarity,
 800183a:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 800183c:	68ca      	ldr	r2, [r1, #12]
  tmpccer = TIMx->CCER;
 800183e:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001840:	6a1d      	ldr	r5, [r3, #32]
 8001842:	2601      	movs	r6, #1
 8001844:	43b5      	bics	r5, r6
 8001846:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001848:	699d      	ldr	r5, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800184a:	36ef      	adds	r6, #239	@ 0xef
 800184c:	43b5      	bics	r5, r6
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800184e:	0112      	lsls	r2, r2, #4
 8001850:	432a      	orrs	r2, r5
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001852:	250a      	movs	r5, #10
 8001854:	43a9      	bics	r1, r5
  tmpccer |= TIM_ICPolarity;
 8001856:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 8001858:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800185a:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800185c:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 800185e:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001860:	2170      	movs	r1, #112	@ 0x70
 8001862:	438b      	bics	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001864:	3919      	subs	r1, #25
 8001866:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8001868:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800186a:	2000      	movs	r0, #0
}
 800186c:	e015      	b.n	800189a <HAL_TIM_ConfigClockSource+0xca>
  switch (sClockSourceConfig->ClockSource)
 800186e:	2280      	movs	r2, #128	@ 0x80
 8001870:	0152      	lsls	r2, r2, #5
 8001872:	4293      	cmp	r3, r2
 8001874:	d05d      	beq.n	8001932 <HAL_TIM_ConfigClockSource+0x162>
 8001876:	2280      	movs	r2, #128	@ 0x80
 8001878:	0192      	lsls	r2, r2, #6
 800187a:	4293      	cmp	r3, r2
 800187c:	d014      	beq.n	80018a8 <HAL_TIM_ConfigClockSource+0xd8>
 800187e:	2b70      	cmp	r3, #112	@ 0x70
 8001880:	d159      	bne.n	8001936 <HAL_TIM_ConfigClockSource+0x166>
      TIM_ETR_SetConfig(htim->Instance,
 8001882:	68cb      	ldr	r3, [r1, #12]
 8001884:	684a      	ldr	r2, [r1, #4]
 8001886:	6889      	ldr	r1, [r1, #8]
 8001888:	6820      	ldr	r0, [r4, #0]
 800188a:	f7ff ff95 	bl	80017b8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800188e:	6822      	ldr	r2, [r4, #0]
 8001890:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001892:	2177      	movs	r1, #119	@ 0x77
 8001894:	430b      	orrs	r3, r1
      htim->Instance->SMCR = tmpsmcr;
 8001896:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8001898:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800189a:	233d      	movs	r3, #61	@ 0x3d
 800189c:	2201      	movs	r2, #1
 800189e:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(htim);
 80018a0:	3b01      	subs	r3, #1
 80018a2:	2200      	movs	r2, #0
 80018a4:	54e2      	strb	r2, [r4, r3]
}
 80018a6:	bd70      	pop	{r4, r5, r6, pc}
      TIM_ETR_SetConfig(htim->Instance,
 80018a8:	68cb      	ldr	r3, [r1, #12]
 80018aa:	684a      	ldr	r2, [r1, #4]
 80018ac:	6889      	ldr	r1, [r1, #8]
 80018ae:	6820      	ldr	r0, [r4, #0]
 80018b0:	f7ff ff82 	bl	80017b8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80018b4:	6822      	ldr	r2, [r4, #0]
 80018b6:	6891      	ldr	r1, [r2, #8]
 80018b8:	2380      	movs	r3, #128	@ 0x80
 80018ba:	01db      	lsls	r3, r3, #7
 80018bc:	430b      	orrs	r3, r1
 80018be:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80018c0:	2000      	movs	r0, #0
      break;
 80018c2:	e7ea      	b.n	800189a <HAL_TIM_ConfigClockSource+0xca>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80018c4:	6823      	ldr	r3, [r4, #0]
                               sClockSourceConfig->ClockPolarity,
 80018c6:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 80018c8:	68c9      	ldr	r1, [r1, #12]
  tmpccer = TIMx->CCER;
 80018ca:	6a18      	ldr	r0, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80018cc:	6a1d      	ldr	r5, [r3, #32]
 80018ce:	2610      	movs	r6, #16
 80018d0:	43b5      	bics	r5, r6
 80018d2:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80018d4:	699d      	ldr	r5, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80018d6:	4e1b      	ldr	r6, [pc, #108]	@ (8001944 <HAL_TIM_ConfigClockSource+0x174>)
 80018d8:	4035      	ands	r5, r6
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80018da:	0309      	lsls	r1, r1, #12
 80018dc:	4329      	orrs	r1, r5
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80018de:	25a0      	movs	r5, #160	@ 0xa0
 80018e0:	43a8      	bics	r0, r5
  tmpccer |= (TIM_ICPolarity << 4U);
 80018e2:	0112      	lsls	r2, r2, #4
 80018e4:	4302      	orrs	r2, r0
  TIMx->CCMR1 = tmpccmr1 ;
 80018e6:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 80018e8:	621a      	str	r2, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80018ea:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 80018ec:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80018ee:	2170      	movs	r1, #112	@ 0x70
 80018f0:	438b      	bics	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80018f2:	3909      	subs	r1, #9
 80018f4:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 80018f6:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80018f8:	2000      	movs	r0, #0
}
 80018fa:	e7ce      	b.n	800189a <HAL_TIM_ConfigClockSource+0xca>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80018fc:	6823      	ldr	r3, [r4, #0]
                               sClockSourceConfig->ClockPolarity,
 80018fe:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8001900:	68ca      	ldr	r2, [r1, #12]
  tmpccer = TIMx->CCER;
 8001902:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001904:	6a1d      	ldr	r5, [r3, #32]
 8001906:	2601      	movs	r6, #1
 8001908:	43b5      	bics	r5, r6
 800190a:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800190c:	699d      	ldr	r5, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800190e:	36ef      	adds	r6, #239	@ 0xef
 8001910:	43b5      	bics	r5, r6
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001912:	0112      	lsls	r2, r2, #4
 8001914:	432a      	orrs	r2, r5
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001916:	250a      	movs	r5, #10
 8001918:	43a9      	bics	r1, r5
  tmpccer |= TIM_ICPolarity;
 800191a:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 800191c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800191e:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001920:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8001922:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001924:	2170      	movs	r1, #112	@ 0x70
 8001926:	438b      	bics	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001928:	3929      	subs	r1, #41	@ 0x29
 800192a:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 800192c:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800192e:	2000      	movs	r0, #0
}
 8001930:	e7b3      	b.n	800189a <HAL_TIM_ConfigClockSource+0xca>
  HAL_StatusTypeDef status = HAL_OK;
 8001932:	2000      	movs	r0, #0
 8001934:	e7b1      	b.n	800189a <HAL_TIM_ConfigClockSource+0xca>
  switch (sClockSourceConfig->ClockSource)
 8001936:	2001      	movs	r0, #1
 8001938:	e7af      	b.n	800189a <HAL_TIM_ConfigClockSource+0xca>
  __HAL_LOCK(htim);
 800193a:	2002      	movs	r0, #2
 800193c:	e7b3      	b.n	80018a6 <HAL_TIM_ConfigClockSource+0xd6>
 800193e:	46c0      	nop			@ (mov r8, r8)
 8001940:	ffff0088 	.word	0xffff0088
 8001944:	ffff0fff 	.word	0xffff0fff

08001948 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001948:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800194a:	233c      	movs	r3, #60	@ 0x3c
 800194c:	5cc3      	ldrb	r3, [r0, r3]
 800194e:	2b01      	cmp	r3, #1
 8001950:	d028      	beq.n	80019a4 <HAL_TIMEx_MasterConfigSynchronization+0x5c>
 8001952:	233c      	movs	r3, #60	@ 0x3c
 8001954:	2201      	movs	r2, #1
 8001956:	54c2      	strb	r2, [r0, r3]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001958:	3301      	adds	r3, #1
 800195a:	3201      	adds	r2, #1
 800195c:	54c2      	strb	r2, [r0, r3]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800195e:	6804      	ldr	r4, [r0, #0]
 8001960:	6863      	ldr	r3, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001962:	68a2      	ldr	r2, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001964:	2570      	movs	r5, #112	@ 0x70
 8001966:	43ab      	bics	r3, r5
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001968:	680d      	ldr	r5, [r1, #0]
 800196a:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800196c:	6063      	str	r3, [r4, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800196e:	6803      	ldr	r3, [r0, #0]
 8001970:	4c0d      	ldr	r4, [pc, #52]	@ (80019a8 <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 8001972:	42a3      	cmp	r3, r4
 8001974:	d009      	beq.n	800198a <HAL_TIMEx_MasterConfigSynchronization+0x42>
 8001976:	2480      	movs	r4, #128	@ 0x80
 8001978:	05e4      	lsls	r4, r4, #23
 800197a:	42a3      	cmp	r3, r4
 800197c:	d005      	beq.n	800198a <HAL_TIMEx_MasterConfigSynchronization+0x42>
 800197e:	4c0b      	ldr	r4, [pc, #44]	@ (80019ac <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 8001980:	42a3      	cmp	r3, r4
 8001982:	d002      	beq.n	800198a <HAL_TIMEx_MasterConfigSynchronization+0x42>
 8001984:	4c0a      	ldr	r4, [pc, #40]	@ (80019b0 <HAL_TIMEx_MasterConfigSynchronization+0x68>)
 8001986:	42a3      	cmp	r3, r4
 8001988:	d104      	bne.n	8001994 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800198a:	2480      	movs	r4, #128	@ 0x80
 800198c:	43a2      	bics	r2, r4
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800198e:	6849      	ldr	r1, [r1, #4]
 8001990:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001992:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001994:	233d      	movs	r3, #61	@ 0x3d
 8001996:	2201      	movs	r2, #1
 8001998:	54c2      	strb	r2, [r0, r3]

  __HAL_UNLOCK(htim);
 800199a:	3b01      	subs	r3, #1
 800199c:	2200      	movs	r2, #0
 800199e:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 80019a0:	2000      	movs	r0, #0
}
 80019a2:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 80019a4:	2002      	movs	r0, #2
 80019a6:	e7fc      	b.n	80019a2 <HAL_TIMEx_MasterConfigSynchronization+0x5a>
 80019a8:	40012c00 	.word	0x40012c00
 80019ac:	40000400 	.word	0x40000400
 80019b0:	40014000 	.word	0x40014000

080019b4 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80019b4:	4770      	bx	lr

080019b6 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80019b6:	4770      	bx	lr

080019b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80019b8:	b510      	push	{r4, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80019ba:	f3ef 8c10 	mrs	ip, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80019be:	2201      	movs	r2, #1
 80019c0:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80019c4:	6801      	ldr	r1, [r0, #0]
 80019c6:	680b      	ldr	r3, [r1, #0]
 80019c8:	4c12      	ldr	r4, [pc, #72]	@ (8001a14 <UART_EndRxTransfer+0x5c>)
 80019ca:	4023      	ands	r3, r4
 80019cc:	600b      	str	r3, [r1, #0]
 80019ce:	f38c 8810 	msr	PRIMASK, ip
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80019d2:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80019d6:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80019da:	6801      	ldr	r1, [r0, #0]
 80019dc:	688b      	ldr	r3, [r1, #8]
 80019de:	4393      	bics	r3, r2
 80019e0:	608b      	str	r3, [r1, #8]
 80019e2:	f38c 8810 	msr	PRIMASK, ip

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80019e6:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d006      	beq.n	80019fa <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80019ec:	2380      	movs	r3, #128	@ 0x80
 80019ee:	2220      	movs	r2, #32
 80019f0:	50c2      	str	r2, [r0, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80019f2:	2300      	movs	r3, #0
 80019f4:	6603      	str	r3, [r0, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80019f6:	6683      	str	r3, [r0, #104]	@ 0x68
}
 80019f8:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80019fa:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80019fe:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001a02:	6802      	ldr	r2, [r0, #0]
 8001a04:	6813      	ldr	r3, [r2, #0]
 8001a06:	3432      	adds	r4, #50	@ 0x32
 8001a08:	34ff      	adds	r4, #255	@ 0xff
 8001a0a:	43a3      	bics	r3, r4
 8001a0c:	6013      	str	r3, [r2, #0]
 8001a0e:	f381 8810 	msr	PRIMASK, r1
}
 8001a12:	e7eb      	b.n	80019ec <UART_EndRxTransfer+0x34>
 8001a14:	fffffedf 	.word	0xfffffedf

08001a18 <UART_SetConfig>:
{
 8001a18:	b510      	push	{r4, lr}
 8001a1a:	0004      	movs	r4, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001a1c:	6801      	ldr	r1, [r0, #0]
 8001a1e:	680a      	ldr	r2, [r1, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001a20:	6883      	ldr	r3, [r0, #8]
 8001a22:	6900      	ldr	r0, [r0, #16]
 8001a24:	4303      	orrs	r3, r0
 8001a26:	6960      	ldr	r0, [r4, #20]
 8001a28:	4303      	orrs	r3, r0
 8001a2a:	69e0      	ldr	r0, [r4, #28]
 8001a2c:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001a2e:	4860      	ldr	r0, [pc, #384]	@ (8001bb0 <UART_SetConfig+0x198>)
 8001a30:	4002      	ands	r2, r0
 8001a32:	4313      	orrs	r3, r2
 8001a34:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001a36:	6822      	ldr	r2, [r4, #0]
 8001a38:	6853      	ldr	r3, [r2, #4]
 8001a3a:	495e      	ldr	r1, [pc, #376]	@ (8001bb4 <UART_SetConfig+0x19c>)
 8001a3c:	400b      	ands	r3, r1
 8001a3e:	68e1      	ldr	r1, [r4, #12]
 8001a40:	430b      	orrs	r3, r1
 8001a42:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001a44:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001a46:	6821      	ldr	r1, [r4, #0]
 8001a48:	688a      	ldr	r2, [r1, #8]
  tmpreg |= huart->Init.OneBitSampling;
 8001a4a:	6a20      	ldr	r0, [r4, #32]
 8001a4c:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001a4e:	485a      	ldr	r0, [pc, #360]	@ (8001bb8 <UART_SetConfig+0x1a0>)
 8001a50:	4002      	ands	r2, r0
 8001a52:	4313      	orrs	r3, r2
 8001a54:	608b      	str	r3, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001a56:	6823      	ldr	r3, [r4, #0]
 8001a58:	4a58      	ldr	r2, [pc, #352]	@ (8001bbc <UART_SetConfig+0x1a4>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d02f      	beq.n	8001abe <UART_SetConfig+0xa6>
 8001a5e:	4a58      	ldr	r2, [pc, #352]	@ (8001bc0 <UART_SetConfig+0x1a8>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d03e      	beq.n	8001ae2 <UART_SetConfig+0xca>
 8001a64:	4a57      	ldr	r2, [pc, #348]	@ (8001bc4 <UART_SetConfig+0x1ac>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d100      	bne.n	8001a6c <UART_SetConfig+0x54>
 8001a6a:	e093      	b.n	8001b94 <UART_SetConfig+0x17c>
 8001a6c:	4a56      	ldr	r2, [pc, #344]	@ (8001bc8 <UART_SetConfig+0x1b0>)
 8001a6e:	4694      	mov	ip, r2
 8001a70:	4463      	add	r3, ip
 8001a72:	1e5a      	subs	r2, r3, #1
 8001a74:	4193      	sbcs	r3, r2
 8001a76:	011b      	lsls	r3, r3, #4
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001a78:	2280      	movs	r2, #128	@ 0x80
 8001a7a:	0212      	lsls	r2, r2, #8
 8001a7c:	69e1      	ldr	r1, [r4, #28]
 8001a7e:	4291      	cmp	r1, r2
 8001a80:	d055      	beq.n	8001b2e <UART_SetConfig+0x116>
    switch (clocksource)
 8001a82:	2001      	movs	r0, #1
 8001a84:	2b02      	cmp	r3, #2
 8001a86:	d816      	bhi.n	8001ab6 <UART_SetConfig+0x9e>
        pclk = HAL_RCC_GetPCLK1Freq();
 8001a88:	f7ff fc1a 	bl	80012c0 <HAL_RCC_GetPCLK1Freq>
 8001a8c:	0003      	movs	r3, r0
    if (pclk != 0U)
 8001a8e:	2000      	movs	r0, #0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d010      	beq.n	8001ab6 <UART_SetConfig+0x9e>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001a94:	6861      	ldr	r1, [r4, #4]
 8001a96:	0848      	lsrs	r0, r1, #1
 8001a98:	18c0      	adds	r0, r0, r3
 8001a9a:	f7fe fb35 	bl	8000108 <__udivsi3>
 8001a9e:	0003      	movs	r3, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001aa0:	0001      	movs	r1, r0
 8001aa2:	3910      	subs	r1, #16
 8001aa4:	4a49      	ldr	r2, [pc, #292]	@ (8001bcc <UART_SetConfig+0x1b4>)
        ret = HAL_ERROR;
 8001aa6:	2001      	movs	r0, #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001aa8:	4291      	cmp	r1, r2
 8001aaa:	d804      	bhi.n	8001ab6 <UART_SetConfig+0x9e>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8001aac:	6822      	ldr	r2, [r4, #0]
 8001aae:	041b      	lsls	r3, r3, #16
 8001ab0:	0c1b      	lsrs	r3, r3, #16
 8001ab2:	60d3      	str	r3, [r2, #12]
 8001ab4:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->TxISR = NULL;
 8001aba:	66e3      	str	r3, [r4, #108]	@ 0x6c
}
 8001abc:	bd10      	pop	{r4, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001abe:	4b44      	ldr	r3, [pc, #272]	@ (8001bd0 <UART_SetConfig+0x1b8>)
 8001ac0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d056      	beq.n	8001b78 <UART_SetConfig+0x160>
 8001aca:	d85c      	bhi.n	8001b86 <UART_SetConfig+0x16e>
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d029      	beq.n	8001b24 <UART_SetConfig+0x10c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001ad0:	2380      	movs	r3, #128	@ 0x80
 8001ad2:	021b      	lsls	r3, r3, #8
 8001ad4:	69e2      	ldr	r2, [r4, #28]
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d014      	beq.n	8001b04 <UART_SetConfig+0xec>
        pclk = HAL_RCC_GetSysClockFreq();
 8001ada:	f7ff fb0b 	bl	80010f4 <HAL_RCC_GetSysClockFreq>
 8001ade:	0003      	movs	r3, r0
        break;
 8001ae0:	e7d5      	b.n	8001a8e <UART_SetConfig+0x76>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001ae2:	4b3b      	ldr	r3, [pc, #236]	@ (8001bd0 <UART_SetConfig+0x1b8>)
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ae6:	22c0      	movs	r2, #192	@ 0xc0
 8001ae8:	0292      	lsls	r2, r2, #10
 8001aea:	4013      	ands	r3, r2
 8001aec:	2280      	movs	r2, #128	@ 0x80
 8001aee:	0292      	lsls	r2, r2, #10
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d056      	beq.n	8001ba2 <UART_SetConfig+0x18a>
 8001af4:	d80a      	bhi.n	8001b0c <UART_SetConfig+0xf4>
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d016      	beq.n	8001b28 <UART_SetConfig+0x110>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001afa:	2380      	movs	r3, #128	@ 0x80
 8001afc:	021b      	lsls	r3, r3, #8
 8001afe:	69e2      	ldr	r2, [r4, #28]
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d1ea      	bne.n	8001ada <UART_SetConfig+0xc2>
        pclk = HAL_RCC_GetSysClockFreq();
 8001b04:	f7ff faf6 	bl	80010f4 <HAL_RCC_GetSysClockFreq>
 8001b08:	0003      	movs	r3, r0
        break;
 8001b0a:	e02f      	b.n	8001b6c <UART_SetConfig+0x154>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001b0c:	22c0      	movs	r2, #192	@ 0xc0
 8001b0e:	0292      	lsls	r2, r2, #10
        ret = HAL_ERROR;
 8001b10:	2001      	movs	r0, #1
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d1cf      	bne.n	8001ab6 <UART_SetConfig+0x9e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001b16:	2380      	movs	r3, #128	@ 0x80
 8001b18:	021b      	lsls	r3, r3, #8
 8001b1a:	69e2      	ldr	r2, [r4, #28]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d029      	beq.n	8001b74 <UART_SetConfig+0x15c>
 8001b20:	4b2c      	ldr	r3, [pc, #176]	@ (8001bd4 <UART_SetConfig+0x1bc>)
 8001b22:	e7b7      	b.n	8001a94 <UART_SetConfig+0x7c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001b24:	2300      	movs	r3, #0
 8001b26:	e7a7      	b.n	8001a78 <UART_SetConfig+0x60>
 8001b28:	2300      	movs	r3, #0
 8001b2a:	e7a5      	b.n	8001a78 <UART_SetConfig+0x60>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001b2c:	2302      	movs	r3, #2
    switch (clocksource)
 8001b2e:	2001      	movs	r0, #1
 8001b30:	2b04      	cmp	r3, #4
 8001b32:	d8c0      	bhi.n	8001ab6 <UART_SetConfig+0x9e>
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d016      	beq.n	8001b66 <UART_SetConfig+0x14e>
 8001b38:	4b26      	ldr	r3, [pc, #152]	@ (8001bd4 <UART_SetConfig+0x1bc>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001b3a:	6861      	ldr	r1, [r4, #4]
 8001b3c:	0058      	lsls	r0, r3, #1
 8001b3e:	084b      	lsrs	r3, r1, #1
 8001b40:	18c0      	adds	r0, r0, r3
 8001b42:	f7fe fae1 	bl	8000108 <__udivsi3>
 8001b46:	0003      	movs	r3, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001b48:	0001      	movs	r1, r0
 8001b4a:	3910      	subs	r1, #16
 8001b4c:	4a1f      	ldr	r2, [pc, #124]	@ (8001bcc <UART_SetConfig+0x1b4>)
        ret = HAL_ERROR;
 8001b4e:	2001      	movs	r0, #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001b50:	4291      	cmp	r1, r2
 8001b52:	d8b0      	bhi.n	8001ab6 <UART_SetConfig+0x9e>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001b54:	4a20      	ldr	r2, [pc, #128]	@ (8001bd8 <UART_SetConfig+0x1c0>)
 8001b56:	401a      	ands	r2, r3
        huart->Instance->BRR = brrtemp;
 8001b58:	6821      	ldr	r1, [r4, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001b5a:	071b      	lsls	r3, r3, #28
 8001b5c:	0f5b      	lsrs	r3, r3, #29
        huart->Instance->BRR = brrtemp;
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	60cb      	str	r3, [r1, #12]
 8001b62:	2000      	movs	r0, #0
 8001b64:	e7a7      	b.n	8001ab6 <UART_SetConfig+0x9e>
        pclk = HAL_RCC_GetPCLK1Freq();
 8001b66:	f7ff fbab 	bl	80012c0 <HAL_RCC_GetPCLK1Freq>
 8001b6a:	0003      	movs	r3, r0
    if (pclk != 0U)
 8001b6c:	2000      	movs	r0, #0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d0a1      	beq.n	8001ab6 <UART_SetConfig+0x9e>
 8001b72:	e7e2      	b.n	8001b3a <UART_SetConfig+0x122>
        pclk = (uint32_t) HSI_VALUE;
 8001b74:	4b17      	ldr	r3, [pc, #92]	@ (8001bd4 <UART_SetConfig+0x1bc>)
 8001b76:	e7e0      	b.n	8001b3a <UART_SetConfig+0x122>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001b78:	69e3      	ldr	r3, [r4, #28]
 8001b7a:	2280      	movs	r2, #128	@ 0x80
 8001b7c:	0212      	lsls	r2, r2, #8
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d0db      	beq.n	8001b3a <UART_SetConfig+0x122>
        pclk = (uint32_t) LSE_VALUE;
 8001b82:	0013      	movs	r3, r2
 8001b84:	e786      	b.n	8001a94 <UART_SetConfig+0x7c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001b86:	2380      	movs	r3, #128	@ 0x80
 8001b88:	021b      	lsls	r3, r3, #8
 8001b8a:	69e2      	ldr	r2, [r4, #28]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d0cd      	beq.n	8001b2c <UART_SetConfig+0x114>
        pclk = (uint32_t) HSI_VALUE;
 8001b90:	4b10      	ldr	r3, [pc, #64]	@ (8001bd4 <UART_SetConfig+0x1bc>)
 8001b92:	e77f      	b.n	8001a94 <UART_SetConfig+0x7c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001b94:	2380      	movs	r3, #128	@ 0x80
 8001b96:	021b      	lsls	r3, r3, #8
 8001b98:	69e2      	ldr	r2, [r4, #28]
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	d0e3      	beq.n	8001b66 <UART_SetConfig+0x14e>
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	e76f      	b.n	8001a82 <UART_SetConfig+0x6a>
 8001ba2:	69e3      	ldr	r3, [r4, #28]
 8001ba4:	2280      	movs	r2, #128	@ 0x80
 8001ba6:	0212      	lsls	r2, r2, #8
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d0c6      	beq.n	8001b3a <UART_SetConfig+0x122>
        pclk = (uint32_t) LSE_VALUE;
 8001bac:	0013      	movs	r3, r2
 8001bae:	e771      	b.n	8001a94 <UART_SetConfig+0x7c>
 8001bb0:	efff69f3 	.word	0xefff69f3
 8001bb4:	ffffcfff 	.word	0xffffcfff
 8001bb8:	fffff4ff 	.word	0xfffff4ff
 8001bbc:	40013800 	.word	0x40013800
 8001bc0:	40004400 	.word	0x40004400
 8001bc4:	40004800 	.word	0x40004800
 8001bc8:	bfffb400 	.word	0xbfffb400
 8001bcc:	0000ffef 	.word	0x0000ffef
 8001bd0:	40021000 	.word	0x40021000
 8001bd4:	007a1200 	.word	0x007a1200
 8001bd8:	0000fff0 	.word	0x0000fff0

08001bdc <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001bdc:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8001bde:	071b      	lsls	r3, r3, #28
 8001be0:	d506      	bpl.n	8001bf0 <UART_AdvFeatureConfig+0x14>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001be2:	6802      	ldr	r2, [r0, #0]
 8001be4:	6853      	ldr	r3, [r2, #4]
 8001be6:	492c      	ldr	r1, [pc, #176]	@ (8001c98 <UART_AdvFeatureConfig+0xbc>)
 8001be8:	400b      	ands	r3, r1
 8001bea:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 8001bec:	430b      	orrs	r3, r1
 8001bee:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001bf0:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8001bf2:	07db      	lsls	r3, r3, #31
 8001bf4:	d506      	bpl.n	8001c04 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001bf6:	6802      	ldr	r2, [r0, #0]
 8001bf8:	6853      	ldr	r3, [r2, #4]
 8001bfa:	4928      	ldr	r1, [pc, #160]	@ (8001c9c <UART_AdvFeatureConfig+0xc0>)
 8001bfc:	400b      	ands	r3, r1
 8001bfe:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8001c00:	430b      	orrs	r3, r1
 8001c02:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001c04:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8001c06:	079b      	lsls	r3, r3, #30
 8001c08:	d506      	bpl.n	8001c18 <UART_AdvFeatureConfig+0x3c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001c0a:	6802      	ldr	r2, [r0, #0]
 8001c0c:	6853      	ldr	r3, [r2, #4]
 8001c0e:	4924      	ldr	r1, [pc, #144]	@ (8001ca0 <UART_AdvFeatureConfig+0xc4>)
 8001c10:	400b      	ands	r3, r1
 8001c12:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8001c14:	430b      	orrs	r3, r1
 8001c16:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001c18:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8001c1a:	075b      	lsls	r3, r3, #29
 8001c1c:	d506      	bpl.n	8001c2c <UART_AdvFeatureConfig+0x50>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001c1e:	6802      	ldr	r2, [r0, #0]
 8001c20:	6853      	ldr	r3, [r2, #4]
 8001c22:	4920      	ldr	r1, [pc, #128]	@ (8001ca4 <UART_AdvFeatureConfig+0xc8>)
 8001c24:	400b      	ands	r3, r1
 8001c26:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 8001c28:	430b      	orrs	r3, r1
 8001c2a:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001c2c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8001c2e:	06db      	lsls	r3, r3, #27
 8001c30:	d506      	bpl.n	8001c40 <UART_AdvFeatureConfig+0x64>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001c32:	6802      	ldr	r2, [r0, #0]
 8001c34:	6893      	ldr	r3, [r2, #8]
 8001c36:	491c      	ldr	r1, [pc, #112]	@ (8001ca8 <UART_AdvFeatureConfig+0xcc>)
 8001c38:	400b      	ands	r3, r1
 8001c3a:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 8001c3c:	430b      	orrs	r3, r1
 8001c3e:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001c40:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8001c42:	069b      	lsls	r3, r3, #26
 8001c44:	d506      	bpl.n	8001c54 <UART_AdvFeatureConfig+0x78>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001c46:	6802      	ldr	r2, [r0, #0]
 8001c48:	6893      	ldr	r3, [r2, #8]
 8001c4a:	4918      	ldr	r1, [pc, #96]	@ (8001cac <UART_AdvFeatureConfig+0xd0>)
 8001c4c:	400b      	ands	r3, r1
 8001c4e:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 8001c50:	430b      	orrs	r3, r1
 8001c52:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001c54:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8001c56:	065b      	lsls	r3, r3, #25
 8001c58:	d50b      	bpl.n	8001c72 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001c5a:	6802      	ldr	r2, [r0, #0]
 8001c5c:	6853      	ldr	r3, [r2, #4]
 8001c5e:	4914      	ldr	r1, [pc, #80]	@ (8001cb0 <UART_AdvFeatureConfig+0xd4>)
 8001c60:	400b      	ands	r3, r1
 8001c62:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8001c64:	430b      	orrs	r3, r1
 8001c66:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001c68:	2380      	movs	r3, #128	@ 0x80
 8001c6a:	035b      	lsls	r3, r3, #13
 8001c6c:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	d00a      	beq.n	8001c88 <UART_AdvFeatureConfig+0xac>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001c72:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8001c74:	061b      	lsls	r3, r3, #24
 8001c76:	d506      	bpl.n	8001c86 <UART_AdvFeatureConfig+0xaa>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001c78:	6802      	ldr	r2, [r0, #0]
 8001c7a:	6853      	ldr	r3, [r2, #4]
 8001c7c:	490d      	ldr	r1, [pc, #52]	@ (8001cb4 <UART_AdvFeatureConfig+0xd8>)
 8001c7e:	400b      	ands	r3, r1
 8001c80:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8001c82:	430b      	orrs	r3, r1
 8001c84:	6053      	str	r3, [r2, #4]
}
 8001c86:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001c88:	6802      	ldr	r2, [r0, #0]
 8001c8a:	6853      	ldr	r3, [r2, #4]
 8001c8c:	490a      	ldr	r1, [pc, #40]	@ (8001cb8 <UART_AdvFeatureConfig+0xdc>)
 8001c8e:	400b      	ands	r3, r1
 8001c90:	6c41      	ldr	r1, [r0, #68]	@ 0x44
 8001c92:	430b      	orrs	r3, r1
 8001c94:	6053      	str	r3, [r2, #4]
 8001c96:	e7ec      	b.n	8001c72 <UART_AdvFeatureConfig+0x96>
 8001c98:	ffff7fff 	.word	0xffff7fff
 8001c9c:	fffdffff 	.word	0xfffdffff
 8001ca0:	fffeffff 	.word	0xfffeffff
 8001ca4:	fffbffff 	.word	0xfffbffff
 8001ca8:	ffffefff 	.word	0xffffefff
 8001cac:	ffffdfff 	.word	0xffffdfff
 8001cb0:	ffefffff 	.word	0xffefffff
 8001cb4:	fff7ffff 	.word	0xfff7ffff
 8001cb8:	ff9fffff 	.word	0xff9fffff

08001cbc <UART_WaitOnFlagUntilTimeout>:
{
 8001cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cbe:	46ce      	mov	lr, r9
 8001cc0:	4647      	mov	r7, r8
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	4680      	mov	r8, r0
 8001cc6:	000d      	movs	r5, r1
 8001cc8:	0016      	movs	r6, r2
 8001cca:	4699      	mov	r9, r3
 8001ccc:	9f08      	ldr	r7, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001cce:	4643      	mov	r3, r8
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	69dc      	ldr	r4, [r3, #28]
 8001cd4:	402c      	ands	r4, r5
 8001cd6:	1b64      	subs	r4, r4, r5
 8001cd8:	4262      	negs	r2, r4
 8001cda:	4154      	adcs	r4, r2
 8001cdc:	42b4      	cmp	r4, r6
 8001cde:	d136      	bne.n	8001d4e <UART_WaitOnFlagUntilTimeout+0x92>
    if (Timeout != HAL_MAX_DELAY)
 8001ce0:	1c7a      	adds	r2, r7, #1
 8001ce2:	d0f6      	beq.n	8001cd2 <UART_WaitOnFlagUntilTimeout+0x16>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ce4:	f7fe fdd4 	bl	8000890 <HAL_GetTick>
 8001ce8:	464b      	mov	r3, r9
 8001cea:	1ac0      	subs	r0, r0, r3
 8001cec:	42b8      	cmp	r0, r7
 8001cee:	d833      	bhi.n	8001d58 <UART_WaitOnFlagUntilTimeout+0x9c>
 8001cf0:	2f00      	cmp	r7, #0
 8001cf2:	d033      	beq.n	8001d5c <UART_WaitOnFlagUntilTimeout+0xa0>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001cf4:	4643      	mov	r3, r8
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	6813      	ldr	r3, [r2, #0]
 8001cfa:	075b      	lsls	r3, r3, #29
 8001cfc:	d5e7      	bpl.n	8001cce <UART_WaitOnFlagUntilTimeout+0x12>
 8001cfe:	002b      	movs	r3, r5
 8001d00:	3b40      	subs	r3, #64	@ 0x40
 8001d02:	2140      	movs	r1, #64	@ 0x40
 8001d04:	438b      	bics	r3, r1
 8001d06:	d0e2      	beq.n	8001cce <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001d08:	69d3      	ldr	r3, [r2, #28]
 8001d0a:	071b      	lsls	r3, r3, #28
 8001d0c:	d411      	bmi.n	8001d32 <UART_WaitOnFlagUntilTimeout+0x76>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001d0e:	69d3      	ldr	r3, [r2, #28]
 8001d10:	051b      	lsls	r3, r3, #20
 8001d12:	d5dc      	bpl.n	8001cce <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001d14:	2380      	movs	r3, #128	@ 0x80
 8001d16:	011b      	lsls	r3, r3, #4
 8001d18:	6213      	str	r3, [r2, #32]
          UART_EndRxTransfer(huart);
 8001d1a:	4640      	mov	r0, r8
 8001d1c:	f7ff fe4c 	bl	80019b8 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8001d20:	2384      	movs	r3, #132	@ 0x84
 8001d22:	2220      	movs	r2, #32
 8001d24:	4641      	mov	r1, r8
 8001d26:	50ca      	str	r2, [r1, r3]
          __HAL_UNLOCK(huart);
 8001d28:	3b0c      	subs	r3, #12
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	54ca      	strb	r2, [r1, r3]
          return HAL_TIMEOUT;
 8001d2e:	2003      	movs	r0, #3
 8001d30:	e00e      	b.n	8001d50 <UART_WaitOnFlagUntilTimeout+0x94>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001d32:	2408      	movs	r4, #8
 8001d34:	6214      	str	r4, [r2, #32]
          UART_EndRxTransfer(huart);
 8001d36:	4640      	mov	r0, r8
 8001d38:	f7ff fe3e 	bl	80019b8 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001d3c:	2384      	movs	r3, #132	@ 0x84
 8001d3e:	4642      	mov	r2, r8
 8001d40:	50d4      	str	r4, [r2, r3]
          __HAL_UNLOCK(huart);
 8001d42:	3b0c      	subs	r3, #12
 8001d44:	2200      	movs	r2, #0
 8001d46:	4641      	mov	r1, r8
 8001d48:	54ca      	strb	r2, [r1, r3]
          return HAL_ERROR;
 8001d4a:	2001      	movs	r0, #1
 8001d4c:	e000      	b.n	8001d50 <UART_WaitOnFlagUntilTimeout+0x94>
  return HAL_OK;
 8001d4e:	2000      	movs	r0, #0
}
 8001d50:	bcc0      	pop	{r6, r7}
 8001d52:	46b9      	mov	r9, r7
 8001d54:	46b0      	mov	r8, r6
 8001d56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8001d58:	2003      	movs	r0, #3
 8001d5a:	e7f9      	b.n	8001d50 <UART_WaitOnFlagUntilTimeout+0x94>
 8001d5c:	2003      	movs	r0, #3
 8001d5e:	e7f7      	b.n	8001d50 <UART_WaitOnFlagUntilTimeout+0x94>

08001d60 <UART_CheckIdleState>:
{
 8001d60:	b530      	push	{r4, r5, lr}
 8001d62:	b083      	sub	sp, #12
 8001d64:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d66:	2384      	movs	r3, #132	@ 0x84
 8001d68:	2200      	movs	r2, #0
 8001d6a:	50c2      	str	r2, [r0, r3]
  tickstart = HAL_GetTick();
 8001d6c:	f7fe fd90 	bl	8000890 <HAL_GetTick>
 8001d70:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001d72:	6823      	ldr	r3, [r4, #0]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	071b      	lsls	r3, r3, #28
 8001d78:	d410      	bmi.n	8001d9c <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001d7a:	6823      	ldr	r3, [r4, #0]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	075b      	lsls	r3, r3, #29
 8001d80:	d427      	bmi.n	8001dd2 <UART_CheckIdleState+0x72>
  huart->gState = HAL_UART_STATE_READY;
 8001d82:	2320      	movs	r3, #32
 8001d84:	67e3      	str	r3, [r4, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8001d86:	2280      	movs	r2, #128	@ 0x80
 8001d88:	50a3      	str	r3, [r4, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	6623      	str	r3, [r4, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001d8e:	6663      	str	r3, [r4, #100]	@ 0x64
  return HAL_OK;
 8001d90:	2000      	movs	r0, #0
      __HAL_UNLOCK(huart);
 8001d92:	2378      	movs	r3, #120	@ 0x78
 8001d94:	2200      	movs	r2, #0
 8001d96:	54e2      	strb	r2, [r4, r3]
}
 8001d98:	b003      	add	sp, #12
 8001d9a:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001d9c:	2180      	movs	r1, #128	@ 0x80
 8001d9e:	4b20      	ldr	r3, [pc, #128]	@ (8001e20 <UART_CheckIdleState+0xc0>)
 8001da0:	9300      	str	r3, [sp, #0]
 8001da2:	0003      	movs	r3, r0
 8001da4:	2200      	movs	r2, #0
 8001da6:	0389      	lsls	r1, r1, #14
 8001da8:	0020      	movs	r0, r4
 8001daa:	f7ff ff87 	bl	8001cbc <UART_WaitOnFlagUntilTimeout>
 8001dae:	2800      	cmp	r0, #0
 8001db0:	d0e3      	beq.n	8001d7a <UART_CheckIdleState+0x1a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001db2:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001db6:	2301      	movs	r3, #1
 8001db8:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8001dbc:	6822      	ldr	r2, [r4, #0]
 8001dbe:	6813      	ldr	r3, [r2, #0]
 8001dc0:	2080      	movs	r0, #128	@ 0x80
 8001dc2:	4383      	bics	r3, r0
 8001dc4:	6013      	str	r3, [r2, #0]
 8001dc6:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 8001dca:	2320      	movs	r3, #32
 8001dcc:	67e3      	str	r3, [r4, #124]	@ 0x7c
      return HAL_TIMEOUT;
 8001dce:	387d      	subs	r0, #125	@ 0x7d
 8001dd0:	e7df      	b.n	8001d92 <UART_CheckIdleState+0x32>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001dd2:	2180      	movs	r1, #128	@ 0x80
 8001dd4:	4b12      	ldr	r3, [pc, #72]	@ (8001e20 <UART_CheckIdleState+0xc0>)
 8001dd6:	9300      	str	r3, [sp, #0]
 8001dd8:	002b      	movs	r3, r5
 8001dda:	2200      	movs	r2, #0
 8001ddc:	03c9      	lsls	r1, r1, #15
 8001dde:	0020      	movs	r0, r4
 8001de0:	f7ff ff6c 	bl	8001cbc <UART_WaitOnFlagUntilTimeout>
 8001de4:	2800      	cmp	r0, #0
 8001de6:	d0cc      	beq.n	8001d82 <UART_CheckIdleState+0x22>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001de8:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001dec:	2201      	movs	r2, #1
 8001dee:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001df2:	6821      	ldr	r1, [r4, #0]
 8001df4:	680b      	ldr	r3, [r1, #0]
 8001df6:	4d0b      	ldr	r5, [pc, #44]	@ (8001e24 <UART_CheckIdleState+0xc4>)
 8001df8:	402b      	ands	r3, r5
 8001dfa:	600b      	str	r3, [r1, #0]
 8001dfc:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e00:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e04:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e08:	6821      	ldr	r1, [r4, #0]
 8001e0a:	688b      	ldr	r3, [r1, #8]
 8001e0c:	4393      	bics	r3, r2
 8001e0e:	608b      	str	r3, [r1, #8]
 8001e10:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 8001e14:	2380      	movs	r3, #128	@ 0x80
 8001e16:	321f      	adds	r2, #31
 8001e18:	50e2      	str	r2, [r4, r3]
      return HAL_TIMEOUT;
 8001e1a:	2003      	movs	r0, #3
 8001e1c:	e7b9      	b.n	8001d92 <UART_CheckIdleState+0x32>
 8001e1e:	46c0      	nop			@ (mov r8, r8)
 8001e20:	01ffffff 	.word	0x01ffffff
 8001e24:	fffffedf 	.word	0xfffffedf

08001e28 <HAL_UART_Init>:
{
 8001e28:	b510      	push	{r4, lr}
 8001e2a:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8001e2c:	d02e      	beq.n	8001e8c <HAL_UART_Init+0x64>
  if (huart->gState == HAL_UART_STATE_RESET)
 8001e2e:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d021      	beq.n	8001e78 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8001e34:	2324      	movs	r3, #36	@ 0x24
 8001e36:	67e3      	str	r3, [r4, #124]	@ 0x7c
  __HAL_UART_DISABLE(huart);
 8001e38:	6822      	ldr	r2, [r4, #0]
 8001e3a:	6813      	ldr	r3, [r2, #0]
 8001e3c:	2101      	movs	r1, #1
 8001e3e:	438b      	bics	r3, r1
 8001e40:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001e42:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d11d      	bne.n	8001e84 <HAL_UART_Init+0x5c>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001e48:	0020      	movs	r0, r4
 8001e4a:	f7ff fde5 	bl	8001a18 <UART_SetConfig>
 8001e4e:	2801      	cmp	r0, #1
 8001e50:	d011      	beq.n	8001e76 <HAL_UART_Init+0x4e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e52:	6822      	ldr	r2, [r4, #0]
 8001e54:	6853      	ldr	r3, [r2, #4]
 8001e56:	490e      	ldr	r1, [pc, #56]	@ (8001e90 <HAL_UART_Init+0x68>)
 8001e58:	400b      	ands	r3, r1
 8001e5a:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e5c:	6822      	ldr	r2, [r4, #0]
 8001e5e:	6893      	ldr	r3, [r2, #8]
 8001e60:	212a      	movs	r1, #42	@ 0x2a
 8001e62:	438b      	bics	r3, r1
 8001e64:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8001e66:	6822      	ldr	r2, [r4, #0]
 8001e68:	6813      	ldr	r3, [r2, #0]
 8001e6a:	3929      	subs	r1, #41	@ 0x29
 8001e6c:	430b      	orrs	r3, r1
 8001e6e:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8001e70:	0020      	movs	r0, r4
 8001e72:	f7ff ff75 	bl	8001d60 <UART_CheckIdleState>
}
 8001e76:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8001e78:	3378      	adds	r3, #120	@ 0x78
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 8001e7e:	f7fe fc59 	bl	8000734 <HAL_UART_MspInit>
 8001e82:	e7d7      	b.n	8001e34 <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 8001e84:	0020      	movs	r0, r4
 8001e86:	f7ff fea9 	bl	8001bdc <UART_AdvFeatureConfig>
 8001e8a:	e7dd      	b.n	8001e48 <HAL_UART_Init+0x20>
    return HAL_ERROR;
 8001e8c:	2001      	movs	r0, #1
 8001e8e:	e7f2      	b.n	8001e76 <HAL_UART_Init+0x4e>
 8001e90:	ffffb7ff 	.word	0xffffb7ff

08001e94 <memset>:
 8001e94:	0003      	movs	r3, r0
 8001e96:	1882      	adds	r2, r0, r2
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d100      	bne.n	8001e9e <memset+0xa>
 8001e9c:	4770      	bx	lr
 8001e9e:	7019      	strb	r1, [r3, #0]
 8001ea0:	3301      	adds	r3, #1
 8001ea2:	e7f9      	b.n	8001e98 <memset+0x4>

08001ea4 <__libc_init_array>:
 8001ea4:	b570      	push	{r4, r5, r6, lr}
 8001ea6:	2600      	movs	r6, #0
 8001ea8:	4c0c      	ldr	r4, [pc, #48]	@ (8001edc <__libc_init_array+0x38>)
 8001eaa:	4d0d      	ldr	r5, [pc, #52]	@ (8001ee0 <__libc_init_array+0x3c>)
 8001eac:	1b64      	subs	r4, r4, r5
 8001eae:	10a4      	asrs	r4, r4, #2
 8001eb0:	42a6      	cmp	r6, r4
 8001eb2:	d109      	bne.n	8001ec8 <__libc_init_array+0x24>
 8001eb4:	2600      	movs	r6, #0
 8001eb6:	f000 f819 	bl	8001eec <_init>
 8001eba:	4c0a      	ldr	r4, [pc, #40]	@ (8001ee4 <__libc_init_array+0x40>)
 8001ebc:	4d0a      	ldr	r5, [pc, #40]	@ (8001ee8 <__libc_init_array+0x44>)
 8001ebe:	1b64      	subs	r4, r4, r5
 8001ec0:	10a4      	asrs	r4, r4, #2
 8001ec2:	42a6      	cmp	r6, r4
 8001ec4:	d105      	bne.n	8001ed2 <__libc_init_array+0x2e>
 8001ec6:	bd70      	pop	{r4, r5, r6, pc}
 8001ec8:	00b3      	lsls	r3, r6, #2
 8001eca:	58eb      	ldr	r3, [r5, r3]
 8001ecc:	4798      	blx	r3
 8001ece:	3601      	adds	r6, #1
 8001ed0:	e7ee      	b.n	8001eb0 <__libc_init_array+0xc>
 8001ed2:	00b3      	lsls	r3, r6, #2
 8001ed4:	58eb      	ldr	r3, [r5, r3]
 8001ed6:	4798      	blx	r3
 8001ed8:	3601      	adds	r6, #1
 8001eda:	e7f2      	b.n	8001ec2 <__libc_init_array+0x1e>
 8001edc:	08001f48 	.word	0x08001f48
 8001ee0:	08001f48 	.word	0x08001f48
 8001ee4:	08001f4c 	.word	0x08001f4c
 8001ee8:	08001f48 	.word	0x08001f48

08001eec <_init>:
 8001eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001eee:	46c0      	nop			@ (mov r8, r8)
 8001ef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ef2:	bc08      	pop	{r3}
 8001ef4:	469e      	mov	lr, r3
 8001ef6:	4770      	bx	lr

08001ef8 <_fini>:
 8001ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001efa:	46c0      	nop			@ (mov r8, r8)
 8001efc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001efe:	bc08      	pop	{r3}
 8001f00:	469e      	mov	lr, r3
 8001f02:	4770      	bx	lr
